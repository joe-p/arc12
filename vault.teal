#pragma version 8

b main

close_acct: // close_acct(vault_creator)
	txn OnCompletion
	int NoOp
	==
	assert

	store 0 // close_acct: vault_creator [any]

	// src_map:arc12.rb:12
	load 0 // close_acct: vault_creator [any]
	byte "creator"
	app_global_get
	==
	assert

	// src_map:arc12.rb:14
	itxn_begin

	// src_map:arc12.rb:15
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:16
	load 0 // close_acct: vault_creator [any]
	itxn_field Receiver

	// src_map:arc12.rb:17
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	itxn_field Amount

	// src_map:arc12.rb:18
	int 0
	itxn_field Fee

	// src_map:arc12.rb:19
	txn Sender
	itxn_field CloseRemainderTo

	// src_map:arc12.rb:20
	itxn_submit

	// src_map:arc12.rb:22
	txn GroupIndex
	int 1
	+
	store 1 // delete_vault_txn

	// src_map:arc12.rb:23
	load 1 // delete_vault_txn
	gtxns ApplicationID
	app_params_get AppAddress
	pop
	global CreatorAddress
	==
	assert

	// src_map:arc12.rb:24
	load 1 // delete_vault_txn
	gtxns OnCompletion
	int DeleteApplication
	==
	assert

	// src_map:arc12.rb:25
	retsub

create: // create(receiver, sender)
	txn OnCompletion
	int NoOp
	==
	assert

	txn ApplicationID
	int 0
	==
	assert

	txna Accounts 1
	store 2 // create: receiver [account] The account that can claim ASAs from this vault

	txna Accounts 2
	store 3 // create: sender [account]

	// src_map:arc12.rb:33
	byte "creator"
	load 3 // create: sender [account]
	app_global_put

	// src_map:arc12.rb:34
	byte "receiver"
	load 2 // create: receiver [account] The account that can claim ASAs from this vault
	app_global_put

	// src_map:arc12.rb:35
	retsub

reject: // reject(asa_creator, fee_sink, asa, vault_creator)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 4 // reject: asa_creator [account]

	txna Accounts 2
	store 5 // reject: fee_sink [account]

	txna Assets 0
	store 6 // reject: asa [asset]

	txna Accounts 3
	store 7 // reject: vault_creator [account]

	// src_map:arc12.rb:43
	txn Sender
	byte "receiver"
	app_global_get
	==
	assert

	// src_map:arc12.rb:44
	load 5 // reject: fee_sink [account]
	addr Y76M3MSY6DKBRHBL7C3NNDXGS5IIMQVQVUAB6MP4XEMMGVF2QWNPL226CA
	==
	assert

	// src_map:arc12.rb:45
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	store 8 // pre_mbr

	// src_map:arc12.rb:46
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	store 9 // pre_fee

	// src_map:arc12.rb:49
	itxn_begin

	// src_map:arc12.rb:50
	int axfer
	itxn_field TypeEnum

	// src_map:arc12.rb:51
	load 4 // reject: asa_creator [account]
	itxn_field AssetReceiver

	// src_map:arc12.rb:52
	load 6 // reject: asa [asset]
	itxn_field XferAsset

	// src_map:arc12.rb:53
	load 4 // reject: asa_creator [account]
	itxn_field AssetCloseTo

	// src_map:arc12.rb:54
	itxn_submit

	// src_map:arc12.rb:56
	load 9 // pre_fee
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	-
	store 10 // fee_amt

	// src_map:arc12.rb:57
	load 8 // pre_mbr
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	store 11 // mbr_amt

	// src_map:arc12.rb:60
	itxn_begin

	// src_map:arc12.rb:61
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:62
	load 5 // reject: fee_sink [account]
	itxn_field Receiver

	// src_map:arc12.rb:63
	load 11 // mbr_amt
	int 2
	load 10 // fee_amt
	*
	-
	itxn_field Amount

	// src_map:arc12.rb:64
	itxn_submit

	// src_map:arc12.rb:66
	if1_condition:
		global CurrentApplicationAddress
		acct_params_get AcctTotalAssets
		pop
		int 1
		==
		bz if1_end

	if1_logic:
		load 7 // reject: vault_creator [account]
		callsub close_acct

	if1_end:

	// src_map:arc12.rb:67
	retsub

opt_in: // opt_in(sender, asa, mbr_payment)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 12 // opt_in: sender [account] The account that is sending the ASA

	txna Assets 0
	store 13 // opt_in: asa [asset] The asset to opt-in to

	txn GroupIndex
	int 1
	-
	store 14 // opt_in: mbr_payment [pay] The payment to cover this contracts MBR

	// src_map:arc12.rb:75
	load 13 // opt_in: asa [asset] The asset to opt-in to
	itob
	store 15 // asa_bytes

	// src_map:arc12.rb:76
	load 15 // asa_bytes
	box_get
	swap
	pop
	!
	assert

	// src_map:arc12.rb:77
	load 14 // opt_in: mbr_payment [pay] The payment to cover this contracts MBR
	gtxns Sender
	load 12 // opt_in: sender [account] The account that is sending the ASA
	==
	assert

	// src_map:arc12.rb:78
	load 14 // opt_in: mbr_payment [pay] The payment to cover this contracts MBR
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// src_map:arc12.rb:80
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	store 8 // pre_mbr

	// src_map:arc12.rb:82
	load 15 // asa_bytes
	int 32
	box_create

	// src_map:arc12.rb:83
	load 15 // asa_bytes
	load 12 // opt_in: sender [account] The account that is sending the ASA
	box_put

	// src_map:arc12.rb:85
	// Opt into ASA
	// src_map:arc12.rb:86
	itxn_begin

	// src_map:arc12.rb:87
	int axfer
	itxn_field TypeEnum

	// src_map:arc12.rb:88
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// src_map:arc12.rb:89
	int 0
	itxn_field AssetAmount

	// src_map:arc12.rb:90
	int 0
	itxn_field Fee

	// src_map:arc12.rb:91
	load 13 // opt_in: asa [asset] The asset to opt-in to
	itxn_field XferAsset

	// src_map:arc12.rb:92
	itxn_submit

	// src_map:arc12.rb:94
	load 14 // opt_in: mbr_payment [pay] The payment to cover this contracts MBR
	gtxns Amount
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	load 8 // pre_mbr
	-
	==
	assert

	// src_map:arc12.rb:95
	retsub

delete: // delete()
	txn OnCompletion
	int DeleteApplication
	==
	assert

	// src_map:arc12.rb:100
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	int 0
	==
	assert

	// src_map:arc12.rb:101
	txn Sender
	global CreatorAddress
	==
	assert

	// src_map:arc12.rb:102
	retsub

claim: // claim(asa, receiver, creator, asa_mbr_funder)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Assets 0
	store 16 // claim: asa [asset] The ASA to send

	txna Accounts 1
	store 17 // claim: receiver [account] The account that funded the MBR for the application

	txna Accounts 2
	store 18 // claim: creator [account] The account that can claim from this vault

	txna Accounts 3
	store 19 // claim: asa_mbr_funder [account] The account that funded the MBR for the ASA

	// src_map:arc12.rb:111
	load 16 // claim: asa [asset] The ASA to send
	itob
	store 15 // asa_bytes

	// src_map:arc12.rb:113
	load 15 // asa_bytes
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:114
	load 19 // claim: asa_mbr_funder [account] The account that funded the MBR for the ASA
	load 15 // asa_bytes
	box_get
	pop
	==
	assert

	// src_map:arc12.rb:115
	load 17 // claim: receiver [account] The account that funded the MBR for the application
	byte "receiver"
	app_global_get
	==
	assert

	// src_map:arc12.rb:116
	load 18 // claim: creator [account] The account that can claim from this vault
	byte "creator"
	app_global_get
	==
	assert

	// src_map:arc12.rb:117
	txn Sender
	load 17 // claim: receiver [account] The account that funded the MBR for the application
	==
	assert

	// src_map:arc12.rb:119
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	store 20 // initial_mbr

	// src_map:arc12.rb:121
	load 15 // asa_bytes
	box_del

	// src_map:arc12.rb:123
	// Close ASA to receiver
	// src_map:arc12.rb:124
	itxn_begin

	// src_map:arc12.rb:125
	int axfer
	itxn_field TypeEnum

	// src_map:arc12.rb:126
	load 17 // claim: receiver [account] The account that funded the MBR for the application
	itxn_field AssetReceiver

	// src_map:arc12.rb:127
	int 0
	itxn_field Fee

	// src_map:arc12.rb:128
	txn Sender
	load 16 // claim: asa [asset] The ASA to send
	asset_holding_get AssetBalance
	swap
	pop
	itxn_field AssetAmount

	// src_map:arc12.rb:129
	load 16 // claim: asa [asset] The ASA to send
	itxn_field XferAsset

	// src_map:arc12.rb:130
	load 17 // claim: receiver [account] The account that funded the MBR for the application
	itxn_field AssetCloseTo

	// src_map:arc12.rb:131
	itxn_submit

	// src_map:arc12.rb:133
	// Send ASA MBR to funder
	// src_map:arc12.rb:134
	itxn_begin

	// src_map:arc12.rb:135
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:136
	load 19 // claim: asa_mbr_funder [account] The account that funded the MBR for the ASA
	itxn_field Receiver

	// src_map:arc12.rb:137
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	load 20 // initial_mbr
	-
	itxn_field Amount

	// src_map:arc12.rb:138
	int 0
	itxn_field Fee

	// src_map:arc12.rb:139
	itxn_submit

	// src_map:arc12.rb:141
	if2_condition:
		global CurrentApplicationAddress
		acct_params_get AcctTotalAssets
		pop
		int 1
		==
		bz if2_end

	if2_logic:
		load 18 // claim: creator [account] The account that can claim from this vault
		callsub close_acct

	if2_end:

	// src_map:arc12.rb:142
	retsub

main:
	int 0
	txnas ApplicationArgs
	byte "0518fd12"
	==
	bz abi_routing0

	callsub create

	int 1
	return

abi_routing0:
	int 0
	txnas ApplicationArgs
	byte "3c957feb"
	==
	bz abi_routing1

	callsub reject

	int 1
	return

abi_routing1:
	int 0
	txnas ApplicationArgs
	byte "2cce63e5"
	==
	bz abi_routing2

	callsub opt_in

	int 1
	return

abi_routing2:
	int 0
	txnas ApplicationArgs
	byte "6e86085c"
	==
	bz abi_routing3

	callsub delete

	int 1
	return

abi_routing3:
	int 0
	txnas ApplicationArgs
	byte "c2902ca0"
	==
	bz abi_routing4

	callsub claim

	int 1
	return

abi_routing4: