#pragma version 8

// src_map:arc12.rb:107
b main

// src_map:arc12.rb:12
inner_axfer: // inner_axfer(asa, receiver)
	store 0 // inner_axfer: receiver [account]

	store 1 // inner_axfer: asa [asset]

	// src_map:arc12.rb:13
	itxn_begin

	// src_map:arc12.rb:14
	int axfer
	itxn_field TypeEnum

	// src_map:arc12.rb:15
	load 0 // inner_axfer: receiver [account]
	itxn_field AssetReceiver

	// src_map:arc12.rb:16
	int 0
	itxn_field Fee

	// src_map:arc12.rb:17
	txn Sender
	load 1 // inner_axfer: asa [asset]
	asset_holding_get AssetBalance
	swap
	pop
	itxn_field AssetAmount

	// src_map:arc12.rb:18
	load 1 // inner_axfer: asa [asset]
	itxn_field XferAsset

	// src_map:arc12.rb:19
	load 0 // inner_axfer: receiver [account]
	itxn_field AssetCloseTo

	// src_map:arc12.rb:20
	itxn_submit

	// src_map:arc12.rb:21
	retsub

// src_map:arc12.rb:26
send_payment: // send_payment(receiver, amount)
	store 2 // send_payment: amount [uint64]

	store 3 // send_payment: receiver [account]

	// src_map:arc12.rb:27
	itxn_begin

	// src_map:arc12.rb:28
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:29
	load 3 // send_payment: receiver [account]
	itxn_field Receiver

	// src_map:arc12.rb:30
	load 2 // send_payment: amount [uint64]
	itxn_field Amount

	// src_map:arc12.rb:31
	int 0
	itxn_field Fee

	// src_map:arc12.rb:32
	itxn_submit

	// src_map:arc12.rb:33
	retsub

// src_map:arc12.rb:45
create: // create(receiver, sender)
	txna Accounts 1
	store 4 // create: receiver [account] The account that can claim ASAs from this vault

	txna Accounts 2
	store 5 // create: sender [account]

	// src_map:arc12.rb:46
	txn ApplicationID
	int 0
	==
	assert

	// src_map:arc12.rb:47
	byte "assets"
	int 0
	app_global_put

	// src_map:arc12.rb:48
	byte "creator"
	load 5 // create: sender [account]
	app_global_put

	// src_map:arc12.rb:49
	byte "receiver"
	load 4 // create: receiver [account] The account that can claim ASAs from this vault
	app_global_put

	// src_map:arc12.rb:50
	retsub

// src_map:arc12.rb:57
opt_in: // opt_in(sender, asa, mbr_payment)
	txna Accounts 1
	store 6 // opt_in: sender [account] The account that is sending the ASA

	txna Assets 0
	store 7 // opt_in: asa [asset] The asset to opt-in to

	txn GroupIndex
	int 1
	-
	store 8 // opt_in: mbr_payment [pay] The payment to cover this contracts MBR

	// src_map:arc12.rb:58
	load 8 // opt_in: mbr_payment [pay] The payment to cover this contracts MBR
	gtxns Sender
	load 6 // opt_in: sender [account] The account that is sending the ASA
	==
	assert

	// src_map:arc12.rb:59
	load 8 // opt_in: mbr_payment [pay] The payment to cover this contracts MBR
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// src_map:arc12.rb:60
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	load 8 // opt_in: mbr_payment [pay] The payment to cover this contracts MBR
	gtxns Amount
	==
	assert

	// src_map:arc12.rb:62
	byte "assets"
	byte "assets"
	app_global_get
	int 1
	+
	app_global_put

	// src_map:arc12.rb:64
	load 7 // opt_in: asa [asset] The asset to opt-in to
	itob
	store 9 // asa_bytes

	// src_map:arc12.rb:65
	load 9 // asa_bytes
	int 32
	box_create

	// src_map:arc12.rb:66
	load 9 // asa_bytes
	load 6 // opt_in: sender [account] The account that is sending the ASA
	box_put

	// src_map:arc12.rb:68
	itxn_begin

	// src_map:arc12.rb:69
	int axfer
	itxn_field TypeEnum

	// src_map:arc12.rb:70
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// src_map:arc12.rb:71
	int 0
	itxn_field AssetAmount

	// src_map:arc12.rb:72
	int 0
	itxn_field Fee

	// src_map:arc12.rb:73
	load 7 // opt_in: asa [asset] The asset to opt-in to
	itxn_field XferAsset

	// src_map:arc12.rb:74
	itxn_submit

	// src_map:arc12.rb:75
	retsub

// src_map:arc12.rb:81
claim: // claim(asa, mbr_funder)
	txna Assets 0
	store 10 // claim: asa [asset] The ASA to send

	txna Accounts 1
	store 11 // claim: mbr_funder [account] The account that funded the MBR for the ASA

	// src_map:arc12.rb:82
	load 10 // claim: asa [asset] The ASA to send
	itob
	store 9 // asa_bytes

	// src_map:arc12.rb:83
	load 9 // asa_bytes
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:84
	txn Sender
	byte "receiver"
	app_global_get
	==
	assert

	// src_map:arc12.rb:86
	load 11 // claim: mbr_funder [account] The account that funded the MBR for the ASA
	load 9 // asa_bytes
	box_get
	pop
	==
	assert

	// src_map:arc12.rb:87
	load 9 // asa_bytes
	box_del

	// src_map:arc12.rb:88
	load 10 // claim: asa [asset] The ASA to send
	txn Sender
	callsub inner_axfer

	// src_map:arc12.rb:91
	load 11 // claim: mbr_funder [account] The account that funded the MBR for the ASA

	// src_map:arc12.rb:90
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	callsub send_payment

	// src_map:arc12.rb:92
	byte "assets"
	byte "assets"
	app_global_get
	int 1
	-
	app_global_put

	// src_map:arc12.rb:94
	byte "assets"
	app_global_get
	int 0
	==
	bz if0_else0

	// src_map:arc12.rb:95
	byte "creator"
	box_del

	// src_map:arc12.rb:97
	itxn_begin

	// src_map:arc12.rb:98
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:99
	load 11 // claim: mbr_funder [account] The account that funded the MBR for the ASA
	itxn_field Receiver

	// src_map:arc12.rb:100
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	itxn_field Amount

	// src_map:arc12.rb:101
	int 0
	itxn_field Fee

	// src_map:arc12.rb:102
	load 11 // claim: mbr_funder [account] The account that funded the MBR for the ASA
	itxn_field CloseRemainderTo

	// src_map:arc12.rb:103
	itxn_submit

	// src_map:arc12.rb:104
	b if0_end

if0_else0:

if0_end:

	// src_map:arc12.rb:105
	retsub

main:
	txna ApplicationArgs 0
	byte "0518fd12"
	==
	bz if1_else0

	callsub create

	int 1
	return

	b if1_end

if1_else0:

if1_end:
	txna ApplicationArgs 0
	byte "2cce63e5"
	==
	bz if2_else0

	callsub opt_in

	int 1
	return

	b if2_end

if2_else0:

if2_end:
	txna ApplicationArgs 0
	byte "ac1979ac"
	==
	bz if3_else0

	callsub claim

	int 1
	return

	b if3_end

if3_else0:

// src_map:arc12.rb:107
if3_end: