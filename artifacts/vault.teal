#pragma version 8

b main

close_acct: // close_acct(vault_creator)
	store 0 // close_acct: vault_creator [account]

	// src_map:arc12.rb:11
	load 0 // close_acct: vault_creator [account]
	byte "creator"
	app_global_get
	==
	assert

	// src_map:arc12.rb:13
	itxn_begin

	// src_map:arc12.rb:14
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:15
	load 0 // close_acct: vault_creator [account]
	itxn_field Receiver

	// src_map:arc12.rb:16
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	itxn_field Amount

	// src_map:arc12.rb:17
	int 0
	itxn_field Fee

	// src_map:arc12.rb:18
	txn Sender
	itxn_field CloseRemainderTo

	// src_map:arc12.rb:19
	itxn_submit

	// src_map:arc12.rb:21
	txn GroupIndex
	int 1
	+
	store 1 // delete_vault_txn

	// src_map:arc12.rb:22
	load 1 // delete_vault_txn
	gtxns ApplicationID
	byte "master"
	app_global_get
	==
	assert

	// src_map:arc12.rb:23
	retsub

create: // create(receiver, sender)
	txn OnCompletion
	int NoOp
	==
	assert

	txn ApplicationID
	int 0
	==
	assert

	txna Accounts 1
	store 2 // create: receiver [account] The account that can claim ASAs from this vault

	txna Accounts 2
	store 3 // create: sender [account]

	// src_map:arc12.rb:31
	byte "creator"
	load 3 // create: sender [account]
	app_global_put

	// src_map:arc12.rb:32
	byte "receiver"
	load 2 // create: receiver [account] The account that can claim ASAs from this vault
	app_global_put

	// src_map:arc12.rb:33
	byte "master"
	global CallerApplicationID
	app_global_put

	// src_map:arc12.rb:34
	b post_routing

reject: // reject(asa_creator, fee_sink, asa, vault_creator)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 4 // reject: asa_creator [account]

	txna Accounts 2
	store 5 // reject: fee_sink [account]

	txna Assets 0
	store 6 // reject: asa [asset]

	txna Accounts 3
	store 7 // reject: vault_creator [account]

	// src_map:arc12.rb:42
	if1_condition:
		load 7 // reject: vault_creator [account]
		global ZeroAddress
		==
		bz if1_end

	if1_logic:

	if1_end:

	// src_map:arc12.rb:43
	txn Sender
	byte "receiver"
	app_global_get
	==
	assert

	// src_map:arc12.rb:44
	load 5 // reject: fee_sink [account]
	addr Y76M3MSY6DKBRHBL7C3NNDXGS5IIMQVQVUAB6MP4XEMMGVF2QWNPL226CA
	==
	assert

	// src_map:arc12.rb:45
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	store 8 // pre_mbr

	// src_map:arc12.rb:46
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	store 9 // pre_fee

	// src_map:arc12.rb:49
	itxn_begin

	// src_map:arc12.rb:50
	int axfer
	itxn_field TypeEnum

	// src_map:arc12.rb:51
	load 4 // reject: asa_creator [account]
	itxn_field AssetReceiver

	// src_map:arc12.rb:52
	load 6 // reject: asa [asset]
	itxn_field XferAsset

	// src_map:arc12.rb:53
	load 4 // reject: asa_creator [account]
	itxn_field AssetCloseTo

	// src_map:arc12.rb:54
	int 0
	itxn_field Fee

	// src_map:arc12.rb:55
	itxn_submit

	// src_map:arc12.rb:57
	load 6 // reject: asa [asset]
	itob
	box_del

	// src_map:arc12.rb:59
	load 8 // pre_mbr
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	store 10 // mbr_amt

	// src_map:arc12.rb:62
	itxn_begin

	// src_map:arc12.rb:63
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:64
	load 5 // reject: fee_sink [account]
	itxn_field Receiver

	// src_map:arc12.rb:65
	load 10 // mbr_amt
	txn Fee
	-
	itxn_field Amount

	// src_map:arc12.rb:66
	int 0
	itxn_field Fee

	// src_map:arc12.rb:67
	itxn_submit

	// src_map:arc12.rb:70
	itxn_begin

	// src_map:arc12.rb:71
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:72
	txn Sender
	itxn_field Receiver

	// src_map:arc12.rb:73
	txn Fee
	itxn_field Amount

	// src_map:arc12.rb:74
	int 0
	itxn_field Fee

	// src_map:arc12.rb:75
	itxn_submit

	// src_map:arc12.rb:77
	if2_condition:
		global CurrentApplicationAddress
		acct_params_get AcctTotalAssets
		pop
		int 0
		==
		bz if2_end

	if2_logic:
		load 4 // reject: asa_creator [account]
		callsub close_acct

	if2_end:

	// src_map:arc12.rb:78
	b post_routing

opt_in: // opt_in(asa, mbr_payment)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Assets 0
	store 11 // opt_in: asa [asset] The asset to opt-in to

	txn GroupIndex
	int 1
	-
	store 12 // opt_in: mbr_payment [pay] The payment to cover this contracts MBR

	// src_map:arc12.rb:85
	load 11 // opt_in: asa [asset] The asset to opt-in to
	itob
	store 13 // asa_bytes

	// src_map:arc12.rb:86
	load 13 // asa_bytes
	box_get
	swap
	pop
	!
	assert

	// src_map:arc12.rb:87
	load 12 // opt_in: mbr_payment [pay] The payment to cover this contracts MBR
	gtxns Sender
	txn Sender
	==
	assert

	// src_map:arc12.rb:88
	load 12 // opt_in: mbr_payment [pay] The payment to cover this contracts MBR
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// src_map:arc12.rb:90
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	store 8 // pre_mbr

	// src_map:arc12.rb:92
	load 13 // asa_bytes
	txn Sender
	box_put

	// src_map:arc12.rb:94
	// Opt into ASA
	// src_map:arc12.rb:95
	itxn_begin

	// src_map:arc12.rb:96
	int axfer
	itxn_field TypeEnum

	// src_map:arc12.rb:97
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// src_map:arc12.rb:98
	int 0
	itxn_field AssetAmount

	// src_map:arc12.rb:99
	int 0
	itxn_field Fee

	// src_map:arc12.rb:100
	load 11 // opt_in: asa [asset] The asset to opt-in to
	itxn_field XferAsset

	// src_map:arc12.rb:101
	itxn_submit

	// src_map:arc12.rb:103
	load 12 // opt_in: mbr_payment [pay] The payment to cover this contracts MBR
	gtxns Amount
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	load 8 // pre_mbr
	-
	==
	assert

	// src_map:arc12.rb:104
	b post_routing

delete: // delete()
	txn OnCompletion
	int DeleteApplication
	==
	assert

	// src_map:arc12.rb:109
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	int 0
	==
	assert

	// src_map:arc12.rb:110
	txn Sender
	global CreatorAddress
	==
	assert

	// src_map:arc12.rb:111
	b post_routing

claim: // claim(asa, creator, asa_mbr_funder)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Assets 0
	store 14 // claim: asa [asset] The ASA to send

	txna Accounts 1
	store 15 // claim: creator [account] The account that funded the MBR for the application

	txna Accounts 2
	store 16 // claim: asa_mbr_funder [account] The account that funded the MBR for the ASA

	// src_map:arc12.rb:119
	load 14 // claim: asa [asset] The ASA to send
	itob
	store 13 // asa_bytes

	// src_map:arc12.rb:121
	if3_condition:
		load 16 // claim: asa_mbr_funder [account] The account that funded the MBR for the ASA
		global ZeroAddress
		==
		bz if3_end

	if3_logic:

	if3_end:

	// src_map:arc12.rb:123
	load 13 // asa_bytes
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:124
	load 15 // claim: creator [account] The account that funded the MBR for the application
	load 13 // asa_bytes
	box_get
	pop
	==
	assert

	// src_map:arc12.rb:125
	txn Sender
	byte "receiver"
	app_global_get
	==
	assert

	// src_map:arc12.rb:126
	load 15 // claim: creator [account] The account that funded the MBR for the application
	byte "creator"
	app_global_get
	==
	assert

	// src_map:arc12.rb:128
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	store 17 // initial_mbr

	// src_map:arc12.rb:130
	load 13 // asa_bytes
	box_del

	// src_map:arc12.rb:132
	// Close ASA to receiver
	// src_map:arc12.rb:133
	itxn_begin

	// src_map:arc12.rb:134
	int axfer
	itxn_field TypeEnum

	// src_map:arc12.rb:135
	txn Sender
	itxn_field AssetReceiver

	// src_map:arc12.rb:136
	int 0
	itxn_field Fee

	// src_map:arc12.rb:137
	global CurrentApplicationAddress
	load 14 // claim: asa [asset] The ASA to send
	asset_holding_get AssetBalance
	swap
	pop
	itxn_field AssetAmount

	// src_map:arc12.rb:138
	load 14 // claim: asa [asset] The ASA to send
	itxn_field XferAsset

	// src_map:arc12.rb:139
	txn Sender
	itxn_field AssetCloseTo

	// src_map:arc12.rb:140
	itxn_submit

	// src_map:arc12.rb:142
	// Send ASA MBR to funder
	// src_map:arc12.rb:143
	itxn_begin

	// src_map:arc12.rb:144
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:145
	load 15 // claim: creator [account] The account that funded the MBR for the application
	itxn_field Receiver

	// src_map:arc12.rb:146
	load 17 // initial_mbr
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	itxn_field Amount

	// src_map:arc12.rb:147
	int 0
	itxn_field Fee

	// src_map:arc12.rb:148
	itxn_submit

	// src_map:arc12.rb:150
	if4_condition:
		global CurrentApplicationAddress
		acct_params_get AcctTotalAssets
		pop
		int 0
		==
		bz if4_end

	if4_logic:
		load 15 // claim: creator [account] The account that funded the MBR for the application
		callsub close_acct

	if4_end:

	// src_map:arc12.rb:151
	b post_routing

main:
	method "create(account,account)void"
	method "reject(account,account,asset,account)void"
	method "opt_in(asset,pay)void"
	method "delete()void"
	method "claim(asset,account,account)void"
	txna ApplicationArgs 0
	match create reject opt_in delete claim
	err

post_routing:

	// src_map:contract.rb:401
	int 1
	return
