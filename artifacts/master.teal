#pragma version 8

b main

create: // create()
	txn OnCompletion
	int NoOp
	==
	assert

	txn ApplicationID
	int 0
	==
	assert

	// src_map:arc12.rb:160
	int 1
	return

	// src_map:arc12.rb:161
	b post_routing

create_vault: // create_vault(receiver, mbr_payment)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 0 // create_vault: receiver [account]

	txn GroupIndex
	int 1
	-
	store 1 // create_vault: mbr_payment [pay]

	// src_map:arc12.rb:169
	load 0 // create_vault: receiver [account]
	box_get
	swap
	pop
	!
	assert

	// src_map:arc12.rb:170
	load 1 // create_vault: mbr_payment [pay]
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// src_map:arc12.rb:171
	load 1 // create_vault: mbr_payment [pay]
	gtxns Sender
	txn Sender
	==
	assert

	// src_map:arc12.rb:172
	load 1 // create_vault: mbr_payment [pay]
	gtxns CloseRemainderTo
	global ZeroAddress
	==
	assert

	// src_map:arc12.rb:174
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	store 2 // pre_create_mbr

	// src_map:arc12.rb:176
	// Create vault
	// src_map:arc12.rb:177
	itxn_begin

	// src_map:arc12.rb:178
	int appl
	itxn_field TypeEnum

	// src_map:arc12.rb:179
	int 0
	itxn_field ApplicationID

	// src_map:arc12.rb:180
	byte b64 CCADAAEEJggHY3JlYXRvcghyZWNlaXZlcgZtYXN0ZXIEwTFcWQSPTFY9BNFsgBgEJDeNPAQpHFFiQgIBNQA0AChkEkSxI7IQNACyBzIKcwFIsggisgExALIJszEWIwg1ATQBOBgqZBJEiTEZIhJEMRgiEkQ2HAE1AjYcAjUDKDQDZyk0AmcqMg1nQgHcMRkiEkQ2HAE1BDYcAjUFNjAANQY2HAM1BzQHMgMSQQAAMQApZBJENAWAIMf8zbJY8NQYnCv4ttaO5pdQhkKwrQAfMfy5GMNUuoWaEkQyCnMBSDUIMgpzAEg1CbEkshA0BLIUNAayETQEshUisgGzNAYWvDQIMgpzAUgJNQqxI7IQNAWyBzQKMQEJsggisgGzsSOyEDEAsgcxAbIIIrIBszIKcwlIIhJBAAU0BIj/AEIBKjEZIhJENjAANQsxFiMJNQw0CxY1DTQNvkxIFEQ0DDgAMQASRDQMOAcyChJEMgpzAUg1CDQNMQC/sSSyEDIKshQishIisgE0C7IRszQMOAgyCnMBSDQICRJEQgDOMRmBBRJEMgpzAEgiEkQxADIJEkRCALcxGSISRDYwADUONhwBNQ82HAI1EDQOFjUNNBAyAxJBAAA0Db5MSEQ0DzQNvkgSRDEAKWQSRDQPKGQSRDIKcwFINRE0DbyxJLIQMQCyFCKyATIKNA5wAExIshI0DrIRMQCyFbOxI7IQNA+yBzQRMgpzAUgJsggisgGzMgpzCUgiEkEABTQPiP4CQgAsKycEJwUnBicHKycEJwUnBicHNhoAjgr+Av4l/tf/M/9K/gL+Jf7X/zP/SgAjQw==
	itxn_field ApprovalProgram

	// src_map:arc12.rb:181
	txna Applications 0
	app_params_get AppClearStateProgram
	pop
	itxn_field ClearStateProgram

	// src_map:arc12.rb:182
	int NoOp
	itxn_field OnCompletion

	// src_map:arc12.rb:183
	load 0 // create_vault: receiver [account]
	itxn_field Accounts

	// src_map:arc12.rb:184
	txn Sender
	itxn_field Accounts

	// src_map:arc12.rb:185
	int 0
	itxn_field Fee

	// src_map:arc12.rb:186
	method "create(account,account)void"
	itxn_field ApplicationArgs

	// src_map:arc12.rb:187
	int 2
	itxn_field GlobalNumByteSlice

	// src_map:arc12.rb:188
	int 1
	itxn_field GlobalNumUint

	// src_map:arc12.rb:189
	itxn_submit

	// src_map:arc12.rb:191
	itxn CreatedApplicationID
	store 3 // vault_id

	// src_map:arc12.rb:193
	// Fund vault with account MBR
	// src_map:arc12.rb:194
	itxn_begin

	// src_map:arc12.rb:195
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:196
	load 3 // vault_id
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// src_map:arc12.rb:197
	global MinBalance
	itxn_field Amount

	// src_map:arc12.rb:198
	int 0
	itxn_field Fee

	// src_map:arc12.rb:199
	itxn_submit

	// src_map:arc12.rb:201
	load 0 // create_vault: receiver [account]
	load 3 // vault_id
	itob
	box_put

	// src_map:arc12.rb:203
	load 1 // create_vault: mbr_payment [pay]
	gtxns Amount
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	load 2 // pre_create_mbr
	-
	global MinBalance
	+
	==
	assert

	// src_map:arc12.rb:205
	load 3 // vault_id
	itob
	byte 0x151f7c75
	swap
	concat
	log

	// src_map:arc12.rb:206
	b post_routing

verify_axfer: // verify_axfer(receiver, vault_axfer, vault)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 4 // verify_axfer: receiver [account]

	txn GroupIndex
	int 1
	-
	store 5 // verify_axfer: vault_axfer [axfer]

	txna Applications 1
	store 6 // verify_axfer: vault [application]

	// src_map:arc12.rb:213
	load 4 // verify_axfer: receiver [account]
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:215
	load 4 // verify_axfer: receiver [account]
	box_get
	pop
	btoi
	load 6 // verify_axfer: vault [application]
	==
	assert

	// src_map:arc12.rb:216
	load 5 // verify_axfer: vault_axfer [axfer]
	gtxns AssetReceiver
	load 6 // verify_axfer: vault [application]
	app_params_get AppAddress
	pop
	==
	assert

	// src_map:arc12.rb:217
	load 5 // verify_axfer: vault_axfer [axfer]
	gtxns CloseRemainderTo
	global ZeroAddress
	==
	assert

	// src_map:arc12.rb:218
	b post_routing

get_vault_id: // get_vault_id(receiver)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 7 // get_vault_id: receiver [account]

	// src_map:arc12.rb:224
	load 7 // get_vault_id: receiver [account]
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:225
	load 7 // get_vault_id: receiver [account]
	box_get
	pop
	byte 0x151f7c75
	swap
	concat
	log

	// src_map:arc12.rb:226
	b post_routing

get_vault_addr: // get_vault_addr(receiver)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 8 // get_vault_addr: receiver [account]

	// src_map:arc12.rb:232
	load 8 // get_vault_addr: receiver [account]
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:233
	load 8 // get_vault_addr: receiver [account]
	box_get
	pop
	btoi
	app_params_get AppAddress
	pop
	byte 0x151f7c75
	swap
	concat
	log

	// src_map:arc12.rb:234
	b post_routing

delete_vault: // delete_vault(vault, creator)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Applications 1
	store 9 // delete_vault: vault [application]

	txna Accounts 1
	store 10 // delete_vault: creator [account]

	// src_map:arc12.rb:240
	txn Fee
	int 0
	==
	assert

	// src_map:arc12.rb:241
	load 9 // delete_vault: vault [application]
	txn Sender
	box_get
	pop
	btoi
	==
	assert

	// src_map:arc12.rb:243
	load 9 // delete_vault: vault [application]
	byte "creator"
	app_global_get_ex
	pop
	store 11 // vault_creator

	// src_map:arc12.rb:244
	load 11 // vault_creator
	load 10 // delete_vault: creator [account]
	==
	assert

	// src_map:arc12.rb:246
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	store 12 // pre_delete_mbr

	// src_map:arc12.rb:248
	// Delete vault
	// src_map:arc12.rb:249
	itxn_begin

	// src_map:arc12.rb:250
	int appl
	itxn_field TypeEnum

	// src_map:arc12.rb:251
	txn Sender
	box_get
	pop
	btoi
	itxn_field ApplicationID

	// src_map:arc12.rb:252
	int DeleteApplication
	itxn_field OnCompletion

	// src_map:arc12.rb:253
	method "delete()void"
	itxn_field ApplicationArgs

	// src_map:arc12.rb:254
	load 10 // delete_vault: creator [account]
	itxn_field Accounts

	// src_map:arc12.rb:255
	int 0
	itxn_field Fee

	// src_map:arc12.rb:256
	itxn_submit

	// src_map:arc12.rb:258
	txn Sender
	box_del

	// src_map:arc12.rb:260
	// Send vault MBR to creator
	// src_map:arc12.rb:261
	itxn_begin

	// src_map:arc12.rb:262
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:263
	load 11 // vault_creator
	itxn_field Receiver

	// src_map:arc12.rb:264
	load 12 // pre_delete_mbr
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	itxn_field Amount

	// src_map:arc12.rb:265
	int 0
	itxn_field Fee

	// src_map:arc12.rb:266
	itxn_submit

	// src_map:arc12.rb:267
	b post_routing

main:
	method "create()void"
	method "create_vault(account,pay)uint64"
	method "verify_axfer(account,axfer,application)void"
	method "get_vault_id(account)uint64"
	method "get_vault_addr(account)address"
	method "delete_vault(application,account)void"
	txna ApplicationArgs 0
	match create create_vault verify_axfer get_vault_id get_vault_addr delete_vault
	err

post_routing:

	// src_map:contract.rb:401
	int 1
	return
