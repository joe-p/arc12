#pragma version 8

b main

create: // create()
	txn OnCompletion
	int NoOp
	==
	assert

	txn ApplicationID
	int 0
	==
	assert

	// src_map:arc12.rb:156
	int 1
	return

	// src_map:arc12.rb:157
	b post_routing

create_vault: // create_vault(receiver, mbr_payment)
	txn OnCompletion
	int NoOp
	==
	assert

	txna ApplicationArgs 1
	btoi
	txnas Accounts
	store 0 // create_vault: receiver [account]

	txn GroupIndex
	int 1
	-
	store 1 // create_vault: mbr_payment [pay]

	// src_map:arc12.rb:165
	load 0 // create_vault: receiver [account]
	box_get
	swap
	pop
	!
	assert

	// src_map:arc12.rb:166
	load 1 // create_vault: mbr_payment [pay]
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// src_map:arc12.rb:167
	load 1 // create_vault: mbr_payment [pay]
	gtxns Sender
	txn Sender
	==
	assert

	// src_map:arc12.rb:168
	load 1 // create_vault: mbr_payment [pay]
	gtxns CloseRemainderTo
	global ZeroAddress
	==
	assert

	// src_map:arc12.rb:170
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	store 2 // pre_create_mbr

	// src_map:arc12.rb:172
	// Create vault
	// src_map:arc12.rb:173
	itxn_begin

	// src_map:arc12.rb:174
	int appl
	itxn_field TypeEnum

	// src_map:arc12.rb:175
	byte b64 CCADAAEEJggHY3JlYXRvcghyZWNlaXZlcgZtYXN0ZXIEwTFcWQSPTFY9BNFsgBgEJDeNPAQpHFFiQgIINQA0AChkEkSxI7IQNACyBzIKcwFIsggisgExALIJszEWIwg1ATQBOBgqZBJEiTEZIhJEMRgiEkQ2GgEXwBw1AjYaAhfAHDUDKDQDZyk0AmcqMg1nQgHdMRkiEkQ2GgEXwBw1BDYaAhfAHDUFNhoDF8AwNQY2GgQXwBw1BzEAKWQSRDQFgCDH/M2yWPDUGJwr+LbWjuaXUIZCsK0AHzH8uRjDVLqFmhJEMgpzAUg1CLEkshA0BLIUNAayETQEshUisgGzNAYWvDQIMgpzAUgJNQmxI7IQNAWyBzQJMQEJsggisgGzsSOyEDEAsgcxAbIIIrIBszIKcwlIIhJBAAU0B4j+/UIBLjEZIhJENhoBF8AwNQoxFiMJNQs0ChY1DDQMvkxIFEQ0CzgAMQASRDQLOAcyChJEMgpzAUg1CDQMMQC/sSSyEDIKshQishIisgE0CrIRszQLOAgyCnMBSDQICRJEQgDPMRmBBRJEMgpzAEgiEkQxADIJEkRCALgxGSISRDYaARfAMDUNNhoCF8AcNQ42GgMXwBw1DzQNFjUMNAy+TEhENA80DL5IEkQxAClkEkQ0DihkEkQyCnMBSDUQNAy8sSSyEDEAshQisgEyCjQNcABMSLISNA2yETEAshWzsSOyEDQPsgc0EDIKcwFICbIIIrIBszIKcwlIIhJBAAU0Doj9+0IALCsnBCcFJwYnBysnBCcFJwYnBzYaAI4K/fv+JP7T/zL/Sf37/iT+0/8y/0kAI0M=
	itxn_field ApprovalProgram

	// src_map:arc12.rb:176
	txna Applications 0
	app_params_get AppClearStateProgram
	pop
	itxn_field ClearStateProgram

	// src_map:arc12.rb:177
	int NoOp
	itxn_field OnCompletion

	// src_map:arc12.rb:178
	load 0 // create_vault: receiver [account]
	itxn_field Accounts

	// src_map:arc12.rb:179
	txn Sender
	itxn_field Accounts

	// src_map:arc12.rb:180
	int 0
	itxn_field Fee

	// src_map:arc12.rb:181
	method "create(account,account)void"
	itxn_field ApplicationArgs

	// src_map:arc12.rb:182
	int 1
	itob
	itxn_field ApplicationArgs

	// src_map:arc12.rb:183
	int 1
	load 0 // create_vault: receiver [account]
	txn Sender
	!=
	+
	itob
	itxn_field ApplicationArgs

	// src_map:arc12.rb:184
	int 2
	itxn_field GlobalNumByteSlice

	// src_map:arc12.rb:185
	int 1
	itxn_field GlobalNumUint

	// src_map:arc12.rb:186
	itxn_submit

	// src_map:arc12.rb:188
	itxn CreatedApplicationID
	store 3 // vault_id

	// src_map:arc12.rb:190
	// Fund vault with account MBR
	// src_map:arc12.rb:191
	itxn_begin

	// src_map:arc12.rb:192
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:193
	load 3 // vault_id
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// src_map:arc12.rb:194
	global MinBalance
	itxn_field Amount

	// src_map:arc12.rb:195
	int 0
	itxn_field Fee

	// src_map:arc12.rb:196
	itxn_submit

	// src_map:arc12.rb:198
	load 0 // create_vault: receiver [account]
	load 3 // vault_id
	itob
	box_put

	// src_map:arc12.rb:200
	load 1 // create_vault: mbr_payment [pay]
	gtxns Amount
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	load 2 // pre_create_mbr
	-
	global MinBalance
	+
	==
	assert

	// src_map:arc12.rb:202
	load 3 // vault_id
	itob
	byte 0x151f7c75
	swap
	concat
	log

	// src_map:arc12.rb:203
	b post_routing

verify_axfer: // verify_axfer(receiver, vault_axfer, vault)
	txn OnCompletion
	int NoOp
	==
	assert

	txna ApplicationArgs 1
	btoi
	txnas Accounts
	store 4 // verify_axfer: receiver [account]

	txn GroupIndex
	int 1
	-
	store 5 // verify_axfer: vault_axfer [axfer]

	txna ApplicationArgs 2
	btoi
	txnas Applications
	store 6 // verify_axfer: vault [application]

	// src_map:arc12.rb:210
	load 4 // verify_axfer: receiver [account]
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:212
	load 4 // verify_axfer: receiver [account]
	box_get
	pop
	btoi
	load 6 // verify_axfer: vault [application]
	==
	assert

	// src_map:arc12.rb:213
	load 5 // verify_axfer: vault_axfer [axfer]
	gtxns AssetReceiver
	load 6 // verify_axfer: vault [application]
	app_params_get AppAddress
	pop
	==
	assert

	// src_map:arc12.rb:214
	load 5 // verify_axfer: vault_axfer [axfer]
	gtxns CloseRemainderTo
	global ZeroAddress
	==
	assert

	// src_map:arc12.rb:215
	b post_routing

get_vault_id: // get_vault_id(receiver)
	txn OnCompletion
	int NoOp
	==
	assert

	txna ApplicationArgs 1
	btoi
	txnas Accounts
	store 7 // get_vault_id: receiver [account]

	// src_map:arc12.rb:221
	load 7 // get_vault_id: receiver [account]
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:222
	load 7 // get_vault_id: receiver [account]
	box_get
	pop
	byte 0x151f7c75
	swap
	concat
	log

	// src_map:arc12.rb:223
	b post_routing

get_vault_addr: // get_vault_addr(receiver)
	txn OnCompletion
	int NoOp
	==
	assert

	txna ApplicationArgs 1
	btoi
	txnas Accounts
	store 8 // get_vault_addr: receiver [account]

	// src_map:arc12.rb:229
	load 8 // get_vault_addr: receiver [account]
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:230
	load 8 // get_vault_addr: receiver [account]
	box_get
	pop
	btoi
	app_params_get AppAddress
	pop
	byte 0x151f7c75
	swap
	concat
	log

	// src_map:arc12.rb:231
	b post_routing

delete_vault: // delete_vault(vault, creator)
	txn OnCompletion
	int NoOp
	==
	assert

	txna ApplicationArgs 1
	btoi
	txnas Applications
	store 9 // delete_vault: vault [application]

	txna ApplicationArgs 2
	btoi
	txnas Accounts
	store 10 // delete_vault: creator [account]

	// src_map:arc12.rb:237
	txn Fee
	int 0
	==
	assert

	// src_map:arc12.rb:238
	load 9 // delete_vault: vault [application]
	txn Sender
	box_get
	pop
	btoi
	==
	assert

	// src_map:arc12.rb:240
	load 9 // delete_vault: vault [application]
	byte "creator"
	app_global_get_ex
	pop
	store 11 // vault_creator

	// src_map:arc12.rb:241
	load 11 // vault_creator
	load 10 // delete_vault: creator [account]
	==
	assert

	// src_map:arc12.rb:243
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	store 12 // pre_delete_mbr

	// src_map:arc12.rb:245
	// Delete vault
	// src_map:arc12.rb:246
	itxn_begin

	// src_map:arc12.rb:247
	int appl
	itxn_field TypeEnum

	// src_map:arc12.rb:248
	txn Sender
	box_get
	pop
	btoi
	itxn_field ApplicationID

	// src_map:arc12.rb:249
	int DeleteApplication
	itxn_field OnCompletion

	// src_map:arc12.rb:250
	method "delete()void"
	itxn_field ApplicationArgs

	// src_map:arc12.rb:251
	load 10 // delete_vault: creator [account]
	itxn_field Accounts

	// src_map:arc12.rb:252
	int 0
	itxn_field Fee

	// src_map:arc12.rb:253
	itxn_submit

	// src_map:arc12.rb:255
	txn Sender
	box_del

	// src_map:arc12.rb:257
	// Send vault MBR to creator
	// src_map:arc12.rb:258
	itxn_begin

	// src_map:arc12.rb:259
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:260
	load 11 // vault_creator
	itxn_field Receiver

	// src_map:arc12.rb:261
	load 12 // pre_delete_mbr
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	itxn_field Amount

	// src_map:arc12.rb:262
	int 0
	itxn_field Fee

	// src_map:arc12.rb:263
	itxn_submit

	// src_map:arc12.rb:264
	b post_routing

main:
	method "create()void"
	method "create_vault(account,pay)uint64"
	method "verify_axfer(account,axfer,application)void"
	method "get_vault_id(account)uint64"
	method "get_vault_addr(account)address"
	method "delete_vault(application,account)void"
	txna ApplicationArgs 0
	match create create_vault verify_axfer get_vault_id get_vault_addr delete_vault
	err

post_routing:

	// src_map:contract.rb:401
	int 1
	return
