#pragma version 8
	b main

closeAcct:
	proto 1 0

	// arc12.ts:18
	// assert(vaultCreator === this.creator.get())
	frame_dig -1 // vaultCreator: Account
	byte "creator"
	app_global_get
	==
	assert

	// arc12.ts:20
	// sendPayment({
	itxn_begin
	int pay
	itxn_field TypeEnum

	// arc12.ts:21
	// receiver: vaultCreator
	frame_dig -1 // vaultCreator: Account
	itxn_field Receiver

	// arc12.ts:22
	// amount: globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	itxn_field Amount

	// arc12.ts:23
	// fee: 0
	int 0
	itxn_field Fee

	// arc12.ts:24
	// closeRemainderTo: this.txn.sender
	txn Sender
	itxn_field CloseRemainderTo
	itxn_submit

	// arc12.ts:27
	// deleteVaultTxn = this.txnGroup[this.txn.groupIndex + 1]
	txn GroupIndex
	int 1
	+
	store 0 // deleteVaultTxn: GroupTxn

	// arc12.ts:28
	// assert(deleteVaultTxn.applicationID === this.master.get())
	load 0 // deleteVaultTxn: GroupTxn
	gtxns ApplicationID
	byte "master"
	app_global_get
	==
	assert
	retsub

abi_route_create:
	txna ApplicationArgs 1
	btoi
	txnas Accounts
	txna ApplicationArgs 2
	btoi
	txnas Accounts
	callsub create
	int 1
	return

create:
	proto 2 0

	// arc12.ts:32
	// this.creator.put(sender)
	byte "creator"
	frame_dig -1 // sender: Account
	app_global_put

	// arc12.ts:33
	// this.receiver.put(receiver)
	byte "receiver"
	frame_dig -2 // receiver: Account
	app_global_put

	// arc12.ts:34
	// this.master.put(globals.callerApplicationID)
	byte "master"
	global CallerApplicationID
	app_global_put
	retsub

abi_route_reject:
	txna ApplicationArgs 1
	btoi
	txnas Accounts
	txna ApplicationArgs 2
	btoi
	txnas Accounts
	txna ApplicationArgs 3
	btoi
	txnas Assets
	txna ApplicationArgs 4
	btoi
	txnas Accounts
	callsub reject
	int 1
	return

reject:
	proto 4 0

	// arc12.ts:38
	// assert(this.txn.sender === this.receiver.get())
	txn Sender
	byte "receiver"
	app_global_get
	==
	assert

	// arc12.ts:39
	// assert(feeSink === addr('Y76M3MSY6DKBRHBL7C3NNDXGS5IIMQVQVUAB6MP4XEMMGVF2QWNPL226CA'))
	frame_dig -3 // feeSink: Account
	addr Y76M3MSY6DKBRHBL7C3NNDXGS5IIMQVQVUAB6MP4XEMMGVF2QWNPL226CA
	==
	assert

	// arc12.ts:40
	// preMbr = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	store 1 // preMbr: uint64

	// arc12.ts:42
	// sendAssetTransfer({
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// arc12.ts:43
	// assetReceiver: asaCreator
	frame_dig -4 // asaCreator: Account
	itxn_field AssetReceiver

	// arc12.ts:44
	// xferAsset: asa
	frame_dig -2 // asa: Asset
	itxn_field XferAsset

	// arc12.ts:45
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// arc12.ts:46
	// assetCloseTo: asaCreator
	frame_dig -4 // asaCreator: Account
	itxn_field AssetCloseTo

	// arc12.ts:47
	// fee: 0
	int 0
	itxn_field Fee
	itxn_submit

	// arc12.ts:50
	// this.funderMap.delete(asa)
	frame_dig -2 // asa: Asset
	itob
	box_del

	// arc12.ts:52
	// mbrAmt = preMbr - globals.currentApplicationAddress.minBalance
	load 1 // preMbr: uint64
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	-
	store 2 // mbrAmt: uint64

	// arc12.ts:54
	// sendPayment({
	itxn_begin
	int pay
	itxn_field TypeEnum

	// arc12.ts:55
	// receiver: feeSink
	frame_dig -3 // feeSink: Account
	itxn_field Receiver

	// arc12.ts:56
	// amount: mbrAmt - this.txn.fee
	load 2 // mbrAmt: uint64
	txn Fee
	-
	itxn_field Amount

	// arc12.ts:57
	// fee: 0
	int 0
	itxn_field Fee
	itxn_submit

	// arc12.ts:60
	// sendPayment({
	itxn_begin
	int pay
	itxn_field TypeEnum

	// arc12.ts:61
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// arc12.ts:62
	// amount: this.txn.fee
	txn Fee
	itxn_field Amount

	// arc12.ts:63
	// fee: 0
	int 0
	itxn_field Fee
	itxn_submit

	// if0_condition
	// arc12.ts:66
	// globals.currentApplicationAddress.totalAssets === 0
	global CurrentApplicationAddress
	acct_params_get AcctTotalAssets
	assert
	int 0
	==
	bz if0_end

	// if0_consequent
	// arc12.ts:66
	// this.closeAcct(vaultCreator)
	frame_dig -1 // vaultCreator: Account
	callsub closeAcct

if0_end:
	retsub

abi_route_optIn:
	txna ApplicationArgs 1
	btoi
	txnas Assets
	txn GroupIndex
	int 1
	-
	callsub optIn
	int 1
	return

optIn:
	proto 2 0

	// arc12.ts:70
	// assert(!this.funderMap.exists(asa))
	frame_dig -2 // asa: Asset
	itob
	box_get
	swap
	pop
	!
	assert

	// arc12.ts:71
	// assert(mbrPayment.sender === this.txn.sender)
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Sender
	txn Sender
	==
	assert

	// arc12.ts:72
	// assert(mbrPayment.receiver === globals.currentApplicationAddress)
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// arc12.ts:74
	// preMbr = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	store 3 // preMbr: uint64

	// arc12.ts:76
	// this.funderMap.put(asa, this.txn.sender)
	frame_dig -2 // asa: Asset
	itob
	txn Sender
	box_put

	// arc12.ts:78
	// sendAssetTransfer({
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// arc12.ts:79
	// assetReceiver: globals.currentApplicationAddress
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// arc12.ts:80
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// arc12.ts:81
	// fee: 0
	int 0
	itxn_field Fee

	// arc12.ts:82
	// xferAsset: asa
	frame_dig -2 // asa: Asset
	itxn_field XferAsset
	itxn_submit

	// arc12.ts:85
	// assert(mbrPayment.amount === globals.currentApplicationAddress.minBalance - preMbr)
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	load 3 // preMbr: uint64
	-
	==
	assert
	retsub

abi_route_claim:
	txna ApplicationArgs 1
	btoi
	txnas Assets
	txna ApplicationArgs 2
	btoi
	txnas Accounts
	txna ApplicationArgs 3
	btoi
	txnas Accounts
	callsub claim
	int 1
	return

claim:
	proto 3 0

	// arc12.ts:89
	// assert(this.funderMap.exists(asa))
	frame_dig -3 // asa: Asset
	itob
	box_get
	swap
	pop
	assert

	// arc12.ts:90
	// assert(asaMbrFunder === this.funderMap.get(asa))
	frame_dig -1 // asaMbrFunder: Account
	frame_dig -3 // asa: Asset
	itob
	box_get
	assert
	==
	assert

	// arc12.ts:91
	// assert(this.txn.sender === this.receiver.get())
	txn Sender
	byte "receiver"
	app_global_get
	==
	assert

	// arc12.ts:92
	// assert(this.creator.get() === creator)
	byte "creator"
	app_global_get
	frame_dig -2 // creator: Account
	==
	assert

	// arc12.ts:94
	// initialMbr = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	store 4 // initialMbr: uint64

	// arc12.ts:96
	// this.funderMap.delete(asa)
	frame_dig -3 // asa: Asset
	itob
	box_del

	// arc12.ts:98
	// sendAssetTransfer({
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// arc12.ts:99
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// arc12.ts:100
	// fee: 0
	int 0
	itxn_field Fee

	// arc12.ts:101
	// assetAmount: globals.currentApplicationAddress.assetBalance(asa)
	global CurrentApplicationAddress
	frame_dig -3 // asa: Asset
	asset_holding_get AssetBalance
	assert
	itxn_field AssetAmount

	// arc12.ts:102
	// xferAsset: asa
	frame_dig -3 // asa: Asset
	itxn_field XferAsset

	// arc12.ts:103
	// assetCloseTo: this.txn.sender
	txn Sender
	itxn_field AssetCloseTo
	itxn_submit

	// arc12.ts:106
	// sendPayment({
	itxn_begin
	int pay
	itxn_field TypeEnum

	// arc12.ts:107
	// receiver: asaMbrFunder
	frame_dig -1 // asaMbrFunder: Account
	itxn_field Receiver

	// arc12.ts:108
	// amount: initialMbr - globals.currentApplicationAddress.minBalance
	load 4 // initialMbr: uint64
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	-
	itxn_field Amount

	// arc12.ts:109
	// fee: 0
	int 0
	itxn_field Fee
	itxn_submit

	// if1_condition
	// arc12.ts:112
	// globals.currentApplicationAddress.totalAssets === 0
	global CurrentApplicationAddress
	acct_params_get AcctTotalAssets
	assert
	int 0
	==
	bz if1_end

	// if1_consequent
	// arc12.ts:112
	// this.closeAcct(creator)
	frame_dig -2 // creator: Account
	callsub closeAcct

if1_end:
	retsub

abi_route_delete:
	callsub delete
	int 1
	return

delete:
	proto 0 0

	// arc12.ts:116
	// assert(!globals.currentApplicationAddress.hasBalance)
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	swap
	pop
	!
	assert

	// arc12.ts:117
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert
	retsub

main:
	method "create(account,account)void"
	method "reject(account,account,asset,account)void"
	method "optIn(asset,pay)void"
	method "claim(asset,account,account)void"
	method "delete()void"
	txna ApplicationArgs 0
	match abi_route_create abi_route_reject abi_route_optIn abi_route_claim abi_route_delete