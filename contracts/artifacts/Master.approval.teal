#pragma version 8
	b main

abi_route_createVault:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dup
	txn GroupIndex
	int 1
	-
	txna ApplicationArgs 1
	callsub createVault
	int 1
	return

createVault:
	proto 4 0

	// arc12.ts:139
	// assert(!this.vaultMap.exists(receiver))
	frame_dig -1 // receiver: address
	box_get
	swap
	pop
	!
	assert

	// arc12.ts:140
	// assert(mbrPayment.receiver === globals.currentApplicationAddress)
	frame_dig -2 // mbrPayment: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// arc12.ts:141
	// assert(mbrPayment.sender === this.txn.sender)
	frame_dig -2 // mbrPayment: pay
	gtxns Sender
	txn Sender
	==
	assert

	// arc12.ts:143
	// preCreateMBR = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_bury -3 // preCreateMBR: uint64

	// Create the vault
	// arc12.ts:146
	// sendMethodCall<[Address, Address], void>({
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "create(address,address)void"
	itxn_field ApplicationArgs

	// arc12.ts:148
	// onCompletion: 'NoOp'
	int NoOp
	itxn_field OnCompletion

	// arc12.ts:149
	// fee: 0
	int 0
	itxn_field Fee

	// arc12.ts:150
	// methodArgs: [receiver, this.txn.sender]
	frame_dig -1 // receiver: address
	itxn_field ApplicationArgs
	txn Sender
	itxn_field ApplicationArgs

	// arc12.ts:151
	// clearStateProgram: this.app.clearStateProgram
	txna Applications 0
	app_params_get AppClearStateProgram
	assert
	itxn_field ClearStateProgram

	// arc12.ts:152
	// approvalProgram: Vault
	byte b64 CCAEAAEEBSYEAAdjcmVhdG9yCHJlY2VpdmVyBm1hc3RlckICOIoCAIv/KWQSRLEjshCL/7IHMgpzAUSyCCKyATEAsgmzMRYjCIz+i/44GCtkEkSL/jkaAIAEm0pkpRJEi/45MgE2MgASRIkxGSISMRgiEhBENhoCNhoBiAACI0OKAgApi/5nKov/ZysyDWeJMRkiEjEYIhMQRChJNhoEF8AcNhoDF8AwNhoCF8AcNhoBF8AciAACI0OKBgAxACpkEkSL/oAgx/zNsljw1BicK/i21o7ml1CGQrCtAB8x/LkYw1S6hZoSRDIKcwFEjPuxJLIQi/+yFIv9shEishKL/7IVIrIBs4v9FryL+zIKcwFECYz6sSOyEIv+sgeL+jEBCbIIIrIBs7EjshAxALIHMQGyCCKyAbMyCnMJRCISQQAGKIv8iP7eiTEZIhIxGCITEEQoMRYjCTYaARfAMIgAAiNDigMAi/8WvkxIFESL/jgAMQASRIv+OAcyChJEMgpzAUSM/Yv/FjEAv7EkshAyCrIUIrISIrIBi/+yEbOL/jgIMgpzAUSL/QkSRIkxGSISMRgiExBEKDYaAxfAHDYaAhfAHDYaARfAMIgAAiNDigQAi/8WvkxIRIv9i/8WvkQSRDEAKmQSRClki/4SRDIKcwFEjPyL/xa8sSSyEDEAshQisgEyCov/cABEshKL/7IRMQCyFbOxI7IQi/2yB4v8MgpzAUQJsggisgGzMgpzCUQiEkEABiiL/oj96okxGSUSMRgiExBEiAACI0OKAAAyCnMATEgURDEAMgkSRIkxG0AACTEZJRIjjgH/0YAEipaYDoAEj0xWPYAEcZebQIAEKRxRYjYaAI4E/dv+AP64/xw=
	itxn_field ApprovalProgram

	// arc12.ts:153
	// globalNumByteSlice: 2
	int 2
	itxn_field GlobalNumByteSlice

	// arc12.ts:154
	// globalNumUint: 1
	int 1
	itxn_field GlobalNumUint
	itxn_submit

	// arc12.ts:157
	// vault = this.itxn.createdApplicationID
	itxn CreatedApplicationID
	frame_bury -4 // vault: application

	// Fund the vault with account MBR
	// arc12.ts:160
	// sendPayment({
	itxn_begin
	int pay
	itxn_field TypeEnum

	// arc12.ts:161
	// receiver: vault.address
	frame_dig -4 // vault: application
	app_params_get AppAddress
	assert
	itxn_field Receiver

	// arc12.ts:162
	// amount: globals.minBalance
	global MinBalance
	itxn_field Amount

	// arc12.ts:163
	// fee: 0
	int 0
	itxn_field Fee
	itxn_submit

	// arc12.ts:166
	// this.vaultMap.put(receiver, vault)
	frame_dig -1 // receiver: address
	frame_dig -4 // vault: application
	itob
	box_put

	// arc12.ts:169
	// assert(mbrPayment.amount === (globals.currentApplicationAddress.minBalance - preCreateMBR) + globals.minBalance)
	frame_dig -2 // mbrPayment: pay
	gtxns Amount
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_dig -3 // preCreateMBR: uint64
	-
	global MinBalance
	+
	==
	assert

	// arc12.ts:171
	// return vault;
	frame_dig -4 // vault: application
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_verifyAxfer:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	txna ApplicationArgs 2
	btoi
	txnas Applications
	txn GroupIndex
	int 1
	-
	txna ApplicationArgs 1
	callsub verifyAxfer
	int 1
	return

verifyAxfer:
	proto 3 0

	// arc12.ts:175
	// assert(this.vaultMap.exists(receiver))
	frame_dig -1 // receiver: address
	box_get
	swap
	pop
	assert

	// arc12.ts:177
	// assert(this.vaultMap.get(receiver) === vault)
	frame_dig -1 // receiver: address
	box_get
	assert
	btoi
	frame_dig -3 // vault: application
	==
	assert

	// arc12.ts:178
	// assert(vaultAxfer.assetReceiver === vault.address)
	frame_dig -2 // vaultAxfer: axfer
	gtxns AssetReceiver
	frame_dig -3 // vault: application
	app_params_get AppAddress
	assert
	==
	assert

	// arc12.ts:179
	// assert(vaultAxfer.assetCloseTo === globals.zeroAddress)
	frame_dig -2 // vaultAxfer: axfer
	gtxns AssetCloseTo
	global ZeroAddress
	==
	assert
	retsub

abi_route_hasVault:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	txna ApplicationArgs 1
	callsub hasVault
	int 1
	return

hasVault:
	proto 1 0

	// arc12.ts:183
	// return this.vaultMap.exists(receiver);
	frame_dig -1 // receiver: address
	box_get
	swap
	pop
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_getVaultId:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	txna ApplicationArgs 1
	callsub getVaultId
	int 1
	return

getVaultId:
	proto 1 0

	// arc12.ts:187
	// return this.vaultMap.get(receiver);
	frame_dig -1 // receiver: address
	box_get
	assert
	btoi
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_getVaultAddr:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	txna ApplicationArgs 1
	callsub getVaultAddr
	int 1
	return

getVaultAddr:
	proto 1 0

	// arc12.ts:191
	// return this.vaultMap.get(receiver).address;
	frame_dig -1 // receiver: address
	box_get
	assert
	btoi
	app_params_get AppAddress
	assert
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_deleteVault:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	txna ApplicationArgs 2
	btoi
	txnas Accounts
	txna ApplicationArgs 1
	btoi
	txnas Applications
	callsub deleteVault
	int 1
	return

deleteVault:
	proto 3 0

	// The fee needs to be 0 because all of the fees need to paid by the vault call
	// This ensures the sender will be refunded for all fees if they are rejecting the last ASA
	// arc12.ts:197
	// assert(this.txn.fee === 0)
	txn Fee
	int 0
	==
	assert

	// arc12.ts:198
	// assert(vault === this.vaultMap.get(this.txn.sender))
	frame_dig -1 // vault: application
	txn Sender
	box_get
	assert
	btoi
	==
	assert

	// arc12.ts:200
	// assert(vault.global('creator') as Account === vaultCreator)
	frame_dig -1 // vault: application
	byte "creator"
	app_global_get_ex
	assert
	frame_dig -2 // vaultCreator: account
	==
	assert

	// arc12.ts:202
	// preDeleteMBR = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_bury -3 // preDeleteMBR: uint64

	// Call delete on the vault
	// arc12.ts:205
	// sendAppCall({
	itxn_begin
	int appl
	itxn_field TypeEnum

	// arc12.ts:206
	// applicationID: vault
	frame_dig -1 // vault: application
	itxn_field ApplicationID

	// arc12.ts:207
	// onCompletion: 'DeleteApplication'
	int DeleteApplication
	itxn_field OnCompletion

	// arc12.ts:208
	// fee: 0
	int 0
	itxn_field Fee
	itxn_submit

	// arc12.ts:211
	// this.vaultMap.delete(this.txn.sender)
	txn Sender
	box_del

	// Send the MBR back to the vault creator
	// arc12.ts:214
	// sendPayment({
	itxn_begin
	int pay
	itxn_field TypeEnum

	// arc12.ts:215
	// receiver: vaultCreator
	frame_dig -2 // vaultCreator: account
	itxn_field Receiver

	// arc12.ts:216
	// amount: preDeleteMBR - globals.currentApplicationAddress.minBalance
	frame_dig -3 // preDeleteMBR: uint64
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	-
	itxn_field Amount

	// arc12.ts:217
	// fee: 0
	int 0
	itxn_field Fee
	itxn_submit
	retsub

main:
	txn NumAppArgs
	bnz route_abi

	// default createApplication
	txn ApplicationID
	int 0
	==
	txn OnCompletion
	int NoOp
	==
	&&
	return

route_abi:
	method "createVault(address,pay)uint64"
	method "verifyAxfer(address,axfer,application)void"
	method "hasVault(address)uint64"
	method "getVaultId(address)uint64"
	method "getVaultAddr(address)address"
	method "deleteVault(application,account)void"
	txna ApplicationArgs 0
	match abi_route_createVault abi_route_verifyAxfer abi_route_hasVault abi_route_getVaultId abi_route_getVaultAddr abi_route_deleteVault