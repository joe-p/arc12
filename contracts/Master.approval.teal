#pragma version 8
	b main

bare_route_create:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	==
	&&
	assert
	byte 0x
	dupn 1
	callsub create
	int 1
	return

create:
	proto 1 0
	retsub

abi_route_createVault:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dupn 3
	txn GroupIndex
	int 1
	-
	txna ApplicationArgs 1
	btoi
	txnas Accounts
	callsub createVault
	int 1
	return

createVault:
	proto 5 0

	// arc12.ts:142
	// assert(!this.vaultMap.exists(receiver))
	frame_dig -1 // receiver: account
	box_get
	swap
	pop
	!
	assert

	// arc12.ts:143
	// assert(mbrPayment.receiver === globals.currentApplicationAddress)
	frame_dig -2 // mbrPayment: paytxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// arc12.ts:144
	// assert(mbrPayment.sender === this.txn.sender)
	frame_dig -2 // mbrPayment: paytxn
	gtxns Sender
	txn Sender
	==
	assert

	// arc12.ts:146
	// preCreateMBR = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_bury -3 // preCreateMBR: uint64

	// Create the vault
	// arc12.ts:149
	// sendMethodCall<[Account, Account], void>({
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "create(account,account)void"
	itxn_field ApplicationArgs

	// arc12.ts:151
	// onCompletion: 'NoOp'
	int NoOp
	itxn_field OnCompletion

	// arc12.ts:152
	// fee: 0
	int 0
	itxn_field Fee

	// arc12.ts:153
	// methodArgs: [receiver, this.txn.sender]
	frame_dig -1 // receiver: account
	itxn_field Accounts
	int 1
	itob
	itxn_field ApplicationArgs
	txn Sender
	itxn_field Accounts
	int 2
	itob
	itxn_field ApplicationArgs

	// arc12.ts:154
	// clearStateProgram: this.app.clearStateProgram
	txna Applications 0
	app_params_get AppClearStateProgram
	assert
	itxn_field ClearStateProgram

	// arc12.ts:155
	// approvalProgram: Vault
	byte b64 CCAEAAEEBSYEAAdjcmVhdG9yCHJlY2VpdmVyBm1hc3RlckICTYoDAIv/KWQSRLEjshCL/7IHMgpzAUSyCCKyATEAsgmzMRYjCIz+i/44GCtkEkSL/jkaAIAEm0pkpRJEi/45MgE2MgASRIkxGSISMRgiEhBEKEcBNhoCF8AcNhoBF8AciAACI0OKAwApi/5nKov/ZysyDWeJMRkiEjEYIhMQRChHAzYaBBfAHDYaAxfAMDYaAhfAHDYaARfAHIgAAiNDigcAMQAqZBJEi/6AIMf8zbJY8NQYnCv4ttaO5pdQhkKwrQAfMfy5GMNUuoWaEkQyCnMBRIz7sSSyEIv/shSL/bIRIrISi/+yFSKyAbOL/Ra8i/syCnMBRAmM+rEjshCL/rIHi/oxAQmyCCKyAbOxI7IQMQCyBzEBsggisgGzMgpzCUQiEkEACChHAov8iP7SiTEZIhIxGCITEEQoRwIxFiMJNhoBF8AwiAACI0OKBACL/xa+TEgURIv+OAAxABJEi/44BzIKEkQyCnMBRIz9i/8WMQC/sSSyEDIKshQishIisgGL/7IRs4v+OAgyCnMBRIv9CRJEiTEZIhIxGCITEEQoRwI2GgMXwBw2GgIXwBw2GgEXwDCIAAIjQ4oFAIv/Fr5MSESL/Yv/Fr5EEkQxACpkEkQpZIv+EkQyCnMBRIz8i/8WvLEkshAxALIUIrIBMgqL/3AARLISi/+yETEAshWzsSOyEIv9sgeL/DIKcwFECbIIIrIBszIKcwlEIhJBAAgoRwKL/oj92IkxGSUSMRgiExBEKEcBiAACI0OKAQAyCnMATEgURDEAMgkSRIkxG0AACTEZJRIjjgH/zoAEwTFcWYAEj0xWPYAEcZebQIAEKRxRYjYaAI4E/cb99P6v/xU=
	itxn_field ApprovalProgram

	// arc12.ts:156
	// globalNumByteSlice: 2
	int 2
	itxn_field GlobalNumByteSlice

	// arc12.ts:157
	// globalNumUint: 1
	int 1
	itxn_field GlobalNumUint
	itxn_submit

	// arc12.ts:160
	// vault = this.itxn.createdApplicationID
	itxn CreatedApplicationID
	frame_bury -4 // vault: application

	// Fund the vault with account MBR
	// arc12.ts:163
	// sendPayment({
	itxn_begin
	int pay
	itxn_field TypeEnum

	// arc12.ts:164
	// receiver: vault.address
	frame_dig -4 // vault: application
	app_params_get AppAddress
	assert
	itxn_field Receiver

	// arc12.ts:165
	// amount: globals.minBalance
	global MinBalance
	itxn_field Amount

	// arc12.ts:166
	// fee: 0
	int 0
	itxn_field Fee
	itxn_submit

	// arc12.ts:169
	// this.vaultMap.put(receiver, vault)
	frame_dig -1 // receiver: account
	frame_dig -4 // vault: application
	itob
	box_put

	// arc12.ts:172
	// assert(mbrPayment.amount === (globals.currentApplicationAddress.minBalance - preCreateMBR) + globals.minBalance)
	frame_dig -2 // mbrPayment: paytxn
	gtxns Amount
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_dig -3 // preCreateMBR: uint64
	-
	global MinBalance
	+
	==
	assert

	// arc12.ts:174
	// return vault;
	frame_dig -4 // vault: application
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_verifyAxfer:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dupn 1
	txna ApplicationArgs 2
	btoi
	txnas Applications
	txn GroupIndex
	int 1
	-
	txna ApplicationArgs 1
	btoi
	txnas Accounts
	callsub verifyAxfer
	int 1
	return

verifyAxfer:
	proto 4 0

	// arc12.ts:178
	// assert(this.vaultMap.exists(receiver))
	frame_dig -1 // receiver: account
	box_get
	swap
	pop
	assert

	// arc12.ts:180
	// assert(this.vaultMap.get(receiver) === vault)
	frame_dig -1 // receiver: account
	box_get
	assert
	btoi
	frame_dig -3 // vault: application
	==
	assert

	// arc12.ts:181
	// assert(vaultAxfer.assetReceiver === vault.address)
	frame_dig -2 // vaultAxfer: assettransfertxn
	gtxns AssetReceiver
	frame_dig -3 // vault: application
	app_params_get AppAddress
	assert
	==
	assert

	// arc12.ts:182
	// assert(vaultAxfer.assetCloseTo === globals.zeroAddress)
	frame_dig -2 // vaultAxfer: assettransfertxn
	gtxns AssetCloseTo
	global ZeroAddress
	==
	assert
	retsub

abi_route_hasVault:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dupn 1
	txna ApplicationArgs 1
	btoi
	txnas Accounts
	callsub hasVault
	int 1
	return

hasVault:
	proto 2 0

	// arc12.ts:186
	// return this.vaultMap.exists(receiver);
	frame_dig -1 // receiver: account
	box_get
	swap
	pop
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_getVaultId:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dupn 1
	txna ApplicationArgs 1
	btoi
	txnas Accounts
	callsub getVaultId
	int 1
	return

getVaultId:
	proto 2 0

	// arc12.ts:190
	// return this.vaultMap.get(receiver);
	frame_dig -1 // receiver: account
	box_get
	assert
	btoi
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_getVaultAddr:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dupn 1
	txna ApplicationArgs 1
	btoi
	txnas Accounts
	callsub getVaultAddr
	int 1
	return

getVaultAddr:
	proto 2 0

	// arc12.ts:194
	// return this.vaultMap.get(receiver).address;
	frame_dig -1 // receiver: account
	box_get
	assert
	btoi
	app_params_get AppAddress
	assert
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_deleteVault:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dupn 3
	txna ApplicationArgs 2
	btoi
	txnas Accounts
	txna ApplicationArgs 1
	btoi
	txnas Applications
	callsub deleteVault
	int 1
	return

deleteVault:
	proto 5 0

	// The fee needs to be 0 because all of the fees need to paid by the vault call
	// This ensures the sender will be refunded for all fees if they are rejecting the last ASA
	// arc12.ts:200
	// assert(this.txn.fee === 0)
	txn Fee
	int 0
	==
	assert

	// arc12.ts:201
	// assert(vault === this.vaultMap.get(this.txn.sender))
	frame_dig -1 // vault: application
	txn Sender
	box_get
	assert
	btoi
	==
	assert

	// arc12.ts:203
	// vaultCreator = vault.global('creator') as Address
	frame_dig -1 // vault: application
	byte "creator"
	app_global_get_ex
	assert
	frame_bury -3 // vaultCreator: address

	// arc12.ts:204
	// assert(vaultCreator === creator)
	frame_dig -3 // vaultCreator: address
	frame_dig -2 // creator: account
	==
	assert

	// arc12.ts:206
	// preDeleteMBR = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_bury -4 // preDeleteMBR: uint64

	// Call delete on the vault
	// arc12.ts:209
	// sendAppCall({
	itxn_begin
	int appl
	itxn_field TypeEnum

	// arc12.ts:210
	// applicationID: vault
	frame_dig -1 // vault: application
	itxn_field ApplicationID

	// arc12.ts:211
	// onCompletion: 'DeleteApplication'
	int DeleteApplication
	itxn_field OnCompletion

	// arc12.ts:212
	// fee: 0
	int 0
	itxn_field Fee
	itxn_submit

	// arc12.ts:215
	// this.vaultMap.delete(this.txn.sender)
	txn Sender
	box_del

	// Send the MBR back to the vault creator
	// arc12.ts:218
	// sendPayment({
	itxn_begin
	int pay
	itxn_field TypeEnum

	// arc12.ts:219
	// receiver: vaultCreator
	frame_dig -3 // vaultCreator: address
	itxn_field Receiver

	// arc12.ts:220
	// amount: preDeleteMBR - globals.currentApplicationAddress.minBalance
	frame_dig -4 // preDeleteMBR: uint64
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	-
	itxn_field Amount

	// arc12.ts:221
	// fee: 0
	int 0
	itxn_field Fee
	itxn_submit
	retsub

main:
	txn NumAppArgs
	bnz route_abi
	txn ApplicationID
	int 0
	==
	bnz bare_route_create

route_abi:
	method "createVault(account,pay)uint64"
	method "verifyAxfer(account,axfer,application)void"
	method "hasVault(account)uint64"
	method "getVaultId(account)uint64"
	method "getVaultAddr(account)address"
	method "deleteVault(application,account)void"
	txna ApplicationArgs 0
	match abi_route_createVault abi_route_verifyAxfer abi_route_hasVault abi_route_getVaultId abi_route_getVaultAddr abi_route_deleteVault