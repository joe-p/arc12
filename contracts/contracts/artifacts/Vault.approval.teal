#pragma version 10

// This TEAL was generated by TEALScript v0.86.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_DeleteApplication

*NOT_IMPLEMENTED:
	err

// closeAcct(vaultCreator: Address): void
closeAcct:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/arc12.algo.ts:18
	// assert(vaultCreator === this.creator.value)
	frame_dig -1 // vaultCreator: Address
	byte 0x63726561746f72 // "creator"
	app_global_get
	==
	assert

	// contracts/arc12.algo.ts:21
	// sendPayment({
	//       receiver: vaultCreator,
	//       amount: globals.currentApplicationAddress.minBalance,
	//       fee: 0,
	//       /// Any remaining balance is sent the receiver for the vault
	//       closeRemainderTo: this.txn.sender,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc12.algo.ts:22
	// receiver: vaultCreator
	frame_dig -1 // vaultCreator: Address
	itxn_field Receiver

	// contracts/arc12.algo.ts:23
	// amount: globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	itxn_field Amount

	// contracts/arc12.algo.ts:24
	// fee: 0
	int 0
	itxn_field Fee

	// contracts/arc12.algo.ts:26
	// closeRemainderTo: this.txn.sender
	txn Sender
	itxn_field CloseRemainderTo

	// Submit inner transaction
	itxn_submit

	// contracts/arc12.algo.ts:29
	// deleteVaultTxn = this.txnGroup[this.txn.groupIndex + 1]
	txn GroupIndex
	int 1
	+
	frame_bury 0 // deleteVaultTxn: txn

	// contracts/arc12.algo.ts:31
	// assert(deleteVaultTxn.applicationID === this.master.value)
	frame_dig 0 // deleteVaultTxn: txn
	gtxns ApplicationID
	byte 0x6d6173746572 // "master"
	app_global_get
	==
	assert

	// contracts/arc12.algo.ts:32
	// assert(deleteVaultTxn.applicationArgs[0] === method('deleteVault(application,account)void'))
	frame_dig 0 // deleteVaultTxn: txn
	gtxns ApplicationArgs 0
	method "deleteVault(application,account)void"
	==
	assert

	// contracts/arc12.algo.ts:33
	// assert(deleteVaultTxn.applications[1] === this.app)
	frame_dig 0 // deleteVaultTxn: txn
	gtxns Applications 1
	txna Applications 0
	==
	assert
	retsub

// create(address,address)void
*abi_route_create:
	// sender: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute create(address,address)void
	callsub create
	int 1
	return

// create(receiver: Address, sender: Address): void
create:
	proto 2 0

	// contracts/arc12.algo.ts:38
	// this.creator.value = sender
	byte 0x63726561746f72 // "creator"
	frame_dig -2 // sender: Address
	app_global_put

	// contracts/arc12.algo.ts:39
	// this.receiver.value = receiver
	byte 0x7265636569766572 // "receiver"
	frame_dig -1 // receiver: Address
	app_global_put

	// contracts/arc12.algo.ts:40
	// this.master.value = globals.callerApplicationID
	byte 0x6d6173746572 // "master"
	global CallerApplicationID
	app_global_put
	retsub

// reject(address,address,uint64,address)void
*abi_route_reject:
	// vaultCreator: address
	txna ApplicationArgs 4
	dup
	len
	int 32
	==
	assert

	// asa: uint64
	txna ApplicationArgs 3
	btoi

	// feeSink: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// asaCreator: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute reject(address,address,uint64,address)void
	callsub reject
	int 1
	return

// reject(asaCreator: Address, feeSink: Address, asa: AssetID, vaultCreator: Address): void
reject:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/arc12.algo.ts:44
	// assert(this.txn.sender === this.receiver.value)
	txn Sender
	byte 0x7265636569766572 // "receiver"
	app_global_get
	==
	assert

	// contracts/arc12.algo.ts:45
	// assert(feeSink === addr('Y76M3MSY6DKBRHBL7C3NNDXGS5IIMQVQVUAB6MP4XEMMGVF2QWNPL226CA'))
	frame_dig -2 // feeSink: Address
	addr Y76M3MSY6DKBRHBL7C3NNDXGS5IIMQVQVUAB6MP4XEMMGVF2QWNPL226CA
	==
	assert

	// contracts/arc12.algo.ts:46
	// preMbr = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 0 // preMbr: uint64

	// contracts/arc12.algo.ts:49
	// sendAssetTransfer({
	//       assetReceiver: asaCreator,
	//       xferAsset: asa,
	//       assetAmount: 0,
	//       assetCloseTo: asaCreator,
	//       fee: 0,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/arc12.algo.ts:50
	// assetReceiver: asaCreator
	frame_dig -1 // asaCreator: Address
	itxn_field AssetReceiver

	// contracts/arc12.algo.ts:51
	// xferAsset: asa
	frame_dig -3 // asa: AssetID
	itxn_field XferAsset

	// contracts/arc12.algo.ts:52
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/arc12.algo.ts:53
	// assetCloseTo: asaCreator
	frame_dig -1 // asaCreator: Address
	itxn_field AssetCloseTo

	// contracts/arc12.algo.ts:54
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/arc12.algo.ts:57
	// this.funderMap(asa).delete()
	frame_dig -3 // asa: AssetID
	itob
	box_del

	// contracts/arc12.algo.ts:59
	// mbrAmt = preMbr - globals.currentApplicationAddress.minBalance
	frame_dig 0 // preMbr: uint64
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	frame_bury 1 // mbrAmt: uint64

	// contracts/arc12.algo.ts:62
	// sendPayment({
	//       receiver: feeSink,
	//       amount: mbrAmt - this.txn.fee,
	//       fee: 0,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc12.algo.ts:63
	// receiver: feeSink
	frame_dig -2 // feeSink: Address
	itxn_field Receiver

	// contracts/arc12.algo.ts:64
	// amount: mbrAmt - this.txn.fee
	frame_dig 1 // mbrAmt: uint64
	txn Fee
	-
	itxn_field Amount

	// contracts/arc12.algo.ts:65
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/arc12.algo.ts:69
	// sendPayment({
	//       receiver: this.txn.sender,
	//       amount: this.txn.fee,
	//       fee: 0,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc12.algo.ts:70
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/arc12.algo.ts:71
	// amount: this.txn.fee
	txn Fee
	itxn_field Amount

	// contracts/arc12.algo.ts:72
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if0_condition
	// contracts/arc12.algo.ts:75
	// globals.currentApplicationAddress.totalAssets === 0
	global CurrentApplicationAddress
	acct_params_get AcctTotalAssets
	pop
	int 0
	==
	bz *if0_end

	// *if0_consequent
	// contracts/arc12.algo.ts:75
	// this.closeAcct(vaultCreator)
	frame_dig -4 // vaultCreator: Address
	callsub closeAcct

*if0_end:
	retsub

// optIn(uint64,pay)void
*abi_route_optIn:
	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// asa: uint64
	txna ApplicationArgs 1
	btoi

	// execute optIn(uint64,pay)void
	callsub optIn
	int 1
	return

// optIn(asa: AssetID, mbrPayment: PayTxn): void
optIn:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/arc12.algo.ts:79
	// assert(!this.funderMap(asa).exists)
	frame_dig -1 // asa: AssetID
	itob
	box_len
	swap
	pop
	!
	assert

	// contracts/arc12.algo.ts:80
	// assert(mbrPayment.sender === this.txn.sender)
	frame_dig -2 // mbrPayment: PayTxn
	gtxns Sender
	txn Sender
	==
	assert

	// contracts/arc12.algo.ts:81
	// assert(mbrPayment.receiver === globals.currentApplicationAddress)
	frame_dig -2 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// contracts/arc12.algo.ts:83
	// preMbr = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 0 // preMbr: uint64

	// contracts/arc12.algo.ts:85
	// this.funderMap(asa).value = this.txn.sender
	frame_dig -1 // asa: AssetID
	itob
	txn Sender
	box_put

	// contracts/arc12.algo.ts:88
	// sendAssetTransfer({
	//       assetReceiver: globals.currentApplicationAddress,
	//       assetAmount: 0,
	//       fee: 0,
	//       xferAsset: asa,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/arc12.algo.ts:89
	// assetReceiver: globals.currentApplicationAddress
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/arc12.algo.ts:90
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/arc12.algo.ts:91
	// fee: 0
	int 0
	itxn_field Fee

	// contracts/arc12.algo.ts:92
	// xferAsset: asa
	frame_dig -1 // asa: AssetID
	itxn_field XferAsset

	// Submit inner transaction
	itxn_submit

	// contracts/arc12.algo.ts:95
	// assert(mbrPayment.amount === globals.currentApplicationAddress.minBalance - preMbr)
	frame_dig -2 // mbrPayment: PayTxn
	gtxns Amount
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_dig 0 // preMbr: uint64
	-
	==
	assert
	retsub

// claim(uint64,address,address)void
*abi_route_claim:
	// asaMbrFunder: address
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// creator: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// asa: uint64
	txna ApplicationArgs 1
	btoi

	// execute claim(uint64,address,address)void
	callsub claim
	int 1
	return

// claim(asa: AssetID, creator: Address, asaMbrFunder: Address): void
claim:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/arc12.algo.ts:99
	// assert(this.funderMap(asa).exists)
	frame_dig -1 // asa: AssetID
	itob
	box_len
	swap
	pop
	assert

	// contracts/arc12.algo.ts:100
	// assert(asaMbrFunder === this.funderMap(asa).value)
	frame_dig -3 // asaMbrFunder: Address
	frame_dig -1 // asa: AssetID
	itob
	box_get
	assert
	==
	assert

	// contracts/arc12.algo.ts:101
	// assert(this.txn.sender === this.receiver.value)
	txn Sender
	byte 0x7265636569766572 // "receiver"
	app_global_get
	==
	assert

	// contracts/arc12.algo.ts:102
	// assert(this.creator.value === creator)
	// Transfer all of the asset to the receiver
	byte 0x63726561746f72 // "creator"
	app_global_get
	frame_dig -2 // creator: Address
	==
	assert

	// contracts/arc12.algo.ts:104
	// initialMbr = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 0 // initialMbr: uint64

	// contracts/arc12.algo.ts:106
	// this.funderMap(asa).delete()
	frame_dig -1 // asa: AssetID
	itob
	box_del

	// contracts/arc12.algo.ts:109
	// sendAssetTransfer({
	//       assetReceiver: this.txn.sender,
	//       fee: 0,
	//       assetAmount: globals.currentApplicationAddress.assetBalance(asa),
	//       xferAsset: asa,
	//       assetCloseTo: this.txn.sender,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/arc12.algo.ts:110
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/arc12.algo.ts:111
	// fee: 0
	int 0
	itxn_field Fee

	// contracts/arc12.algo.ts:112
	// assetAmount: globals.currentApplicationAddress.assetBalance(asa)
	// Send MBR to the funder
	global CurrentApplicationAddress
	frame_dig -1 // asa: AssetID
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// contracts/arc12.algo.ts:113
	// xferAsset: asa
	frame_dig -1 // asa: AssetID
	itxn_field XferAsset

	// contracts/arc12.algo.ts:114
	// assetCloseTo: this.txn.sender
	txn Sender
	itxn_field AssetCloseTo

	// Submit inner transaction
	itxn_submit

	// contracts/arc12.algo.ts:118
	// sendPayment({
	//       receiver: asaMbrFunder,
	//       amount: initialMbr - globals.currentApplicationAddress.minBalance,
	//       fee: 0,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc12.algo.ts:119
	// receiver: asaMbrFunder
	frame_dig -3 // asaMbrFunder: Address
	itxn_field Receiver

	// contracts/arc12.algo.ts:120
	// amount: initialMbr - globals.currentApplicationAddress.minBalance
	frame_dig 0 // initialMbr: uint64
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	itxn_field Amount

	// contracts/arc12.algo.ts:121
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if1_condition
	// contracts/arc12.algo.ts:124
	// globals.currentApplicationAddress.totalAssets === 0
	global CurrentApplicationAddress
	acct_params_get AcctTotalAssets
	pop
	int 0
	==
	bz *if1_end

	// *if1_consequent
	// contracts/arc12.algo.ts:124
	// this.closeAcct(creator)
	frame_dig -2 // creator: Address
	callsub closeAcct

*if1_end:
	retsub

// delete()void
*abi_route_delete:
	// execute delete()void
	callsub delete
	int 1
	return

// delete(): void
delete:
	proto 0 0

	// contracts/arc12.algo.ts:129
	// assert(!globals.currentApplicationAddress.isInLedger)
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	swap
	pop
	!
	assert

	// contracts/arc12.algo.ts:130
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert
	retsub

*create_NoOp:
	method "create(address,address)void"
	txna ApplicationArgs 0
	match *abi_route_create
	err

*call_NoOp:
	method "reject(address,address,uint64,address)void"
	method "optIn(uint64,pay)void"
	method "claim(uint64,address,address)void"
	txna ApplicationArgs 0
	match *abi_route_reject *abi_route_optIn *abi_route_claim
	err

*create_DeleteApplication:
	err

*call_DeleteApplication:
	txn NumAppArgs
	bz *abi_route_delete
	err