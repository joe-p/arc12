{
  "hints": {
    "createVault(address,pay)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyAxfer(address,axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "hasVault(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVaultId(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVaultAddr(address)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteVault(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Master",
    "desc": "",
    "methods": [
      {
        "name": "createVault",
        "args": [
          {
            "name": "receiver",
            "type": "address"
          },
          {
            "name": "mbrPayment",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "verifyAxfer",
        "args": [
          {
            "name": "receiver",
            "type": "address"
          },
          {
            "name": "vaultAxfer",
            "type": "axfer"
          },
          {
            "name": "vault",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "hasVault",
        "args": [
          {
            "name": "receiver",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getVaultId",
        "args": [
          {
            "name": "receiver",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getVaultAddr",
        "args": [
          {
            "name": "receiver",
            "type": "address"
          }
        ],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "deleteVault",
        "args": [
          {
            "name": "vault",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}