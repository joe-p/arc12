#pragma version 10

// This TEAL was generated by TEALScript v0.86.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// create()void
*abi_route_create:
	// execute create()void
	callsub create
	int 1
	return

// create(): void
create:
	proto 0 0
	retsub

// createVault(address,pay)uint64
*abi_route_createVault:
	// The ABI return prefix
	byte 0x151f7c75

	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute createVault(address,pay)uint64
	callsub createVault
	itob
	concat
	log
	int 1
	return

// createVault(receiver: Address, mbrPayment: PayTxn): AppID
createVault:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/arc12.algo.ts:131
	// assert(!this.vaultMap(receiver).exists)
	frame_dig -1 // receiver: Address
	box_len
	swap
	pop
	!
	assert

	// contracts/arc12.algo.ts:132
	// assert(mbrPayment.receiver === globals.currentApplicationAddress)
	frame_dig -2 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// contracts/arc12.algo.ts:133
	// assert(mbrPayment.sender === this.txn.sender)
	frame_dig -2 // mbrPayment: PayTxn
	gtxns Sender
	txn Sender
	==
	assert

	// contracts/arc12.algo.ts:135
	// preCreateMBR = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 0 // preCreateMBR: uint64

	// contracts/arc12.algo.ts:138
	// sendMethodCall<typeof Vault.prototype.create>({
	//       methodArgs: [receiver, this.txn.sender],
	//       clearStateProgram: Vault.clearProgram(),
	//       approvalProgram: Vault.approvalProgram(),
	//       globalNumByteSlice: Vault.schema.global.numByteSlice,
	//       globalNumUint: Vault.schema.global.numUint,
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "create(address,address)void"
	itxn_field ApplicationArgs

	// contracts/arc12.algo.ts:139
	// methodArgs: [receiver, this.txn.sender]
	frame_dig -1 // receiver: Address
	itxn_field ApplicationArgs
	txn Sender
	itxn_field ApplicationArgs

	// contracts/arc12.algo.ts:140
	// clearStateProgram: Vault.clearProgram()
	byte b64 Cg==
	itxn_field ClearStateProgram

	// contracts/arc12.algo.ts:141
	// approvalProgram: Vault.approvalProgram()
	byte b64 CiAEAQAgBCYEAAhyZWNlaXZlcgdjcmVhdG9yBm1hc3RlcjEYFIEGCzEZCI0MAfEAAAAAAAAAAAIQAeMAAAAAAAAAAAIPAIoAACixIrIQKmSyBzIKcwFIsggxALIJI7IBszEWIgiMAIsAOBgrZBJEiwA5GgCABJtKZKUSRIsAOTIBNjIAEkSJNhoCSRUkEkQ2GgFJFSQSRIgAAiJDigIAKov+ZymL/2crMg1niTYaAhc2GgFJFSQSRIgAAiJDigIAKEcCMQApZBJEgCDH/M2yWPDUGJwr+LbWjuaXUIZCsK0AHzH8uRjDVLqFmowAMgpzAUiMAbElshCL/7IUi/6yESOyEov/shUjsgGzi/4WvIsBMgpzAUgJjAKxIrIQiwCyB4sCMQEJsggjsgGzsSKyEDEAsgcxAbIII7IBszIKcwlIIxJBAAOI/v2JMRYiCUk4ECISRDYaAReIAAIiQ4oCACiL/xa9TEgURIv+OAAxABJEi/44BzIKEkQyCnMBSIwAi/8WMQC/sSWyEDIKshQjshKL/7IRI7IBs4v+OAgyCnMBSIsACRJEiTYaAReIAAIiQ4oBACiL/xa9TEhEMQApZBJEMgpzAUiMAIv/FryxJbIQMQCyFDIKi/9wAEiyEov/shExALIVI7IBs7EishCL/xa+RLIHiwAyCnMBSAmyCCOyAbMyCnMJSCMSQQADiP42iYgAAiJDigAAMgpzAExIFEQxADIJEkSJgASKlpgONhoAjgH+UgCABOfnLiyABC5lywqABD0dLw82GgCOA/5Z/vf/VQAAMRtB/7cA
	itxn_field ApprovalProgram

	// contracts/arc12.algo.ts:142
	// globalNumByteSlice: Vault.schema.global.numByteSlice
	int 2
	itxn_field GlobalNumByteSlice

	// contracts/arc12.algo.ts:143
	// globalNumUint: Vault.schema.global.numUint
	int 1
	itxn_field GlobalNumUint

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/arc12.algo.ts:146
	// vault = this.itxn.createdApplicationID
	itxn CreatedApplicationID
	frame_bury 1 // vault: uint64

	// contracts/arc12.algo.ts:149
	// sendPayment({
	//       receiver: vault.address,
	//       amount: globals.minBalance,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc12.algo.ts:150
	// receiver: vault.address
	frame_dig 1 // vault: uint64
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts/arc12.algo.ts:151
	// amount: globals.minBalance
	global MinBalance
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/arc12.algo.ts:154
	// this.vaultMap(receiver).value = vault
	frame_dig -1 // receiver: Address
	frame_dig 1 // vault: uint64
	itob
	box_put

	// contracts/arc12.algo.ts:156
	// assert(mbrPayment.amount === (globals.currentApplicationAddress.minBalance - preCreateMBR) + globals.minBalance)
	frame_dig -2 // mbrPayment: PayTxn
	gtxns Amount
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_dig 0 // preCreateMBR: uint64
	-
	global MinBalance
	+
	==
	assert

	// contracts/arc12.algo.ts:158
	// return vault;
	frame_dig 1 // vault: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// verifyAxfer(address,axfer,uint64)void
*abi_route_verifyAxfer:
	// vault: uint64
	txna ApplicationArgs 2
	btoi

	// vaultAxfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute verifyAxfer(address,axfer,uint64)void
	callsub verifyAxfer
	int 1
	return

// verifyAxfer(receiver: Address, vaultAxfer: AssetTransferTxn, vault: AppID): void
verifyAxfer:
	proto 3 0

	// contracts/arc12.algo.ts:162
	// assert(this.vaultMap(receiver).exists)
	frame_dig -1 // receiver: Address
	box_len
	swap
	pop
	assert

	// contracts/arc12.algo.ts:164
	// assert(this.vaultMap(receiver).value === vault)
	frame_dig -1 // receiver: Address
	box_get
	assert
	btoi
	frame_dig -3 // vault: AppID
	==
	assert

	// contracts/arc12.algo.ts:165
	// assert(vaultAxfer.assetReceiver === vault.address)
	frame_dig -2 // vaultAxfer: AssetTransferTxn
	gtxns AssetReceiver
	frame_dig -3 // vault: AppID
	app_params_get AppAddress
	pop
	==
	assert

	// contracts/arc12.algo.ts:166
	// assert(vaultAxfer.assetCloseTo === globals.zeroAddress)
	frame_dig -2 // vaultAxfer: AssetTransferTxn
	gtxns AssetCloseTo
	global ZeroAddress
	==
	assert
	retsub

// hasVault(address)uint64
*abi_route_hasVault:
	// The ABI return prefix
	byte 0x151f7c75

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute hasVault(address)uint64
	callsub hasVault
	itob
	concat
	log
	int 1
	return

// hasVault(receiver: Address): uint64
hasVault:
	proto 1 1

	// contracts/arc12.algo.ts:171
	// return this.vaultMap(receiver).exists;
	frame_dig -1 // receiver: Address
	box_len
	swap
	pop
	retsub

// getVaultId(address)uint64
*abi_route_getVaultId:
	// The ABI return prefix
	byte 0x151f7c75

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute getVaultId(address)uint64
	callsub getVaultId
	itob
	concat
	log
	int 1
	return

// getVaultId(receiver: Address): AppID
getVaultId:
	proto 1 1

	// contracts/arc12.algo.ts:175
	// return this.vaultMap(receiver).value;
	frame_dig -1 // receiver: Address
	box_get
	assert
	btoi
	retsub

// This ensures the sender will be refunded for all fees if they are rejecting the last ASA
// The fee needs to be 0 because all of the fees need to paid by the vault call
// getVaultAddr(address)address
*abi_route_getVaultAddr:
	// The ABI return prefix
	byte 0x151f7c75

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute getVaultAddr(address)address
	callsub getVaultAddr
	concat
	log
	int 1
	return

// getVaultAddr(receiver: Address): Address
getVaultAddr:
	proto 1 1

	// contracts/arc12.algo.ts:179
	// return this.vaultMap(receiver).value.address;
	app_params_get AppAddress
	pop
	retsub

// deleteVault(uint64)void
*abi_route_deleteVault:
	// vault: uint64
	txna ApplicationArgs 1
	btoi

	// execute deleteVault(uint64)void
	callsub deleteVault
	int 1
	return

// deleteVault(vault: AppID): void
deleteVault:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/arc12.algo.ts:185
	// assert(this.txn.fee === 0)
	txn Fee
	int 0
	==
	assert

	// contracts/arc12.algo.ts:186
	// assert(vault === this.vaultMap(this.txn.sender).value)
	frame_dig -1 // vault: AppID
	txn Sender
	box_get
	assert
	btoi
	==
	assert

	// contracts/arc12.algo.ts:188
	// preDeleteMBR = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 0 // preDeleteMBR: uint64

	// contracts/arc12.algo.ts:191
	// sendAppCall({
	//       applicationID: vault,
	//       onCompletion: OnCompletion.DeleteApplication,
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/arc12.algo.ts:192
	// applicationID: vault
	frame_dig -1 // vault: AppID
	itxn_field ApplicationID

	// contracts/arc12.algo.ts:193
	// onCompletion: OnCompletion.DeleteApplication
	int 5 // DeleteApplication
	itxn_field OnCompletion

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/arc12.algo.ts:196
	// this.vaultMap(this.txn.sender).delete()
	txn Sender
	box_del

	// contracts/arc12.algo.ts:199
	// sendPayment({
	//       receiver: vault.globalState('creator') as Address,
	//       amount: preDeleteMBR - globals.currentApplicationAddress.minBalance,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc12.algo.ts:200
	// receiver: vault.globalState('creator') as Address
	frame_dig -1 // vault: AppID
	byte 0x63726561746f72 // "creator"
	app_global_get_ex
	assert
	itxn_field Receiver

	// contracts/arc12.algo.ts:201
	// amount: preDeleteMBR - globals.currentApplicationAddress.minBalance
	frame_dig 0 // preDeleteMBR: uint64
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	txn NumAppArgs
	bz *abi_route_create
	err

*call_NoOp:
	method "createVault(address,pay)uint64"
	method "verifyAxfer(address,axfer,uint64)void"
	method "hasVault(address)uint64"
	method "getVaultId(address)uint64"
	method "getVaultAddr(address)address"
	method "deleteVault(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createVault *abi_route_verifyAxfer *abi_route_hasVault *abi_route_getVaultId *abi_route_getVaultAddr *abi_route_deleteVault
	err