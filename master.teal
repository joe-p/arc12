#pragma version 8

b main

create_vault: // create_vault(receiver, mbr_payment)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 0 // create_vault: receiver [account]

	txn GroupIndex
	int 1
	-
	store 1 // create_vault: mbr_payment [pay]

	// src_map:arc12.rb:121
	load 0 // create_vault: receiver [account]
	box_get
	swap
	pop
	!
	assert

	// src_map:arc12.rb:122
	load 1 // create_vault: mbr_payment [pay]
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// src_map:arc12.rb:123
	load 1 // create_vault: mbr_payment [pay]
	gtxns Sender
	txn Sender
	==
	assert

	// src_map:arc12.rb:124
	load 1 // create_vault: mbr_payment [pay]
	gtxns CloseRemainderTo
	global ZeroAddress
	==
	assert

	// src_map:arc12.rb:126
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	store 2 // pre_create_mbr

	// src_map:arc12.rb:128
	// Create vault
	// src_map:arc12.rb:129
	itxn_begin

	// src_map:arc12.rb:130
	int appl
	itxn_field TypeEnum

	// src_map:arc12.rb:131
	int 0
	itxn_field ApplicationID

	// src_map:arc12.rb:132
	byte b64 CCAEAAEEBSYIBmFzc2V0cwZtYXN0ZXIHY3JlYXRvcghyZWNlaXZlcggwNTE4ZmQxMggyY2NlNjNlNQg2ZTg2MDg1YwhjMjkwMmNhMEIBWDEZIhJEMRgiEkQ2HAE1ADYcAjUBKCJnKjQBZys0AGcpMg1niTEZIhJENhwBNQI2MAA1AzEWIwk1BDQDFjUFNAW+TEgURDQEOAA0AhJENAQ4BzIKEkQyCnMBSDUGKChkIwhnNAWBILk0BTQCv7EkshAyCrIUIrISIrIBNAOyEbM0BDgIMgpzAUg0BgkSRIkxGSUSRDIKcwBIIhJEMg0pZBJEiTEZIhJENjAANQc2HAE1CDYcAjUJNhwDNQo0BxY1BTQFvkxIRDQKNAW+SBJENAgrZBJENAkqZBJEMQA0CBJEMgpzAUg1CzQFvLEkshA0CLIUIrIBMQA0B3AATEiyEjQHshE0CLIVs7EjshA0CrIHMgpzAUg0CwmyCCKyAbMoKGQjCWcoZCISQQAssSOyEDQJsgcyCnMBSLIIIrIBNAiyCbMxFiMINQw0DDgYKWQSRDQMOBklEkSJIsAaJwQSQQAFiP6cI0MiwBonBRJBAAWI/rIjQyLAGicGEkEABYj/DiNDIsAaJwcSQQAFiP8UI0MiwBonBBJBAAWI/mQjQyLAGicFEkEABYj+eiNDIsAaJwYSQQAFiP7WI0MiwBonBxJBAAWI/twjQw==
	itxn_field ApprovalProgram

	// src_map:arc12.rb:133
	int NoOp
	itxn_field OnCompletion

	// src_map:arc12.rb:134
	load 0 // create_vault: receiver [account]
	itxn_field Accounts

	// src_map:arc12.rb:135
	txn Sender
	itxn_field Accounts

	// src_map:arc12.rb:136
	int 0
	itxn_field Fee

	// src_map:arc12.rb:138
	itxn_submit

	// src_map:arc12.rb:140
	// Fund vault with account MBR
	// src_map:arc12.rb:141
	itxn_begin

	// src_map:arc12.rb:142
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:143
	txn CreatedApplicationID
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// src_map:arc12.rb:144
	global MinBalance
	itxn_field Amount

	// src_map:arc12.rb:145
	int 0
	itxn_field Fee

	// src_map:arc12.rb:146
	itxn_submit

	// src_map:arc12.rb:148
	load 0 // create_vault: receiver [account]
	int 32
	box_create

	// src_map:arc12.rb:149
	load 0 // create_vault: receiver [account]
	txn CreatedApplicationID
	itob
	box_put

	// src_map:arc12.rb:151
	load 1 // create_vault: mbr_payment [pay]
	gtxns Amount
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	load 2 // pre_create_mbr
	-
	global MinBalance
	+
	==
	assert

	// src_map:arc12.rb:153
	txn CreatedApplicationID
	itob
	byte "151f7c75"
	concat
	log

	// src_map:arc12.rb:154
	retsub

verify_axfer: // verify_axfer(receiver, vault_axfer)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 3 // verify_axfer: receiver [account]

	txn GroupIndex
	int 1
	-
	store 4 // verify_axfer: vault_axfer [axfer]

	// src_map:arc12.rb:160
	load 3 // verify_axfer: receiver [account]
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:161
	load 4 // verify_axfer: vault_axfer [axfer]
	gtxns Receiver
	load 3 // verify_axfer: receiver [account]
	box_get
	pop
	==
	assert

	// src_map:arc12.rb:162
	load 4 // verify_axfer: vault_axfer [axfer]
	gtxns CloseRemainderTo
	global ZeroAddress
	==
	assert

	// src_map:arc12.rb:163
	retsub

get_vault_id: // get_vault_id(receiver)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 5 // get_vault_id: receiver [account]

	// src_map:arc12.rb:169
	load 5 // get_vault_id: receiver [account]
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:170
	load 5 // get_vault_id: receiver [account]
	box_get
	pop
	byte "151f7c75"
	concat
	log

	// src_map:arc12.rb:171
	retsub

get_vault_addr: // get_vault_addr(receiver)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 6 // get_vault_addr: receiver [account]

	// src_map:arc12.rb:177
	load 6 // get_vault_addr: receiver [account]
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:178
	load 6 // get_vault_addr: receiver [account]
	box_get
	pop
	btoi
	app_params_get AppAddress
	pop
	byte "151f7c75"
	concat
	log

	// src_map:arc12.rb:179
	retsub

delete_vault: // delete_vault(receiver, vault, creator)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 7 // delete_vault: receiver [account]

	txna Applications 0
	store 8 // delete_vault: vault [application]

	txna Accounts 2
	store 9 // delete_vault: creator [account]

	// src_map:arc12.rb:186
	load 7 // delete_vault: receiver [account]
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:187
	load 8 // delete_vault: vault [application]
	load 7 // delete_vault: receiver [account]
	box_get
	pop
	btoi
	==
	assert

	// src_map:arc12.rb:188
	load 8 // delete_vault: vault [application]
	byte "creator"
	app_global_get_ex
	pop
	store 10 // vault_creator

	// src_map:arc12.rb:189
	load 10 // vault_creator
	load 9 // delete_vault: creator [account]
	==
	assert

	// src_map:arc12.rb:191
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	store 11 // pre_delete_mbr

	// src_map:arc12.rb:193
	// Delete vault
	// src_map:arc12.rb:194
	itxn_begin

	// src_map:arc12.rb:195
	int appl
	itxn_field TypeEnum

	// src_map:arc12.rb:196
	load 7 // delete_vault: receiver [account]
	box_get
	pop
	btoi
	itxn_field ApplicationID

	// src_map:arc12.rb:197
	int DeleteApplication
	itxn_field OnCompletion

	// src_map:arc12.rb:198
	int 0
	itxn_field Fee

	// src_map:arc12.rb:199
	itxn_submit

	// src_map:arc12.rb:201
	// Send vault MBR to creator
	// src_map:arc12.rb:202
	itxn_begin

	// src_map:arc12.rb:203
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:204
	load 10 // vault_creator
	itxn_field Receiver

	// src_map:arc12.rb:205
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	load 11 // pre_delete_mbr
	-
	itxn_field Amount

	// src_map:arc12.rb:206
	int 0
	itxn_field Fee

	// src_map:arc12.rb:207
	itxn_submit

	// src_map:arc12.rb:208
	retsub

main:
	int 0
	txnas ApplicationArgs
	byte "dc4a2cde"
	==
	bz abi_routing0

	callsub create_vault

	int 1
	return

abi_routing0:
	int 0
	txnas ApplicationArgs
	byte "e99f0c84"
	==
	bz abi_routing1

	callsub verify_axfer

	int 1
	return

abi_routing1:
	int 0
	txnas ApplicationArgs
	byte "ef7d7c77"
	==
	bz abi_routing2

	callsub get_vault_id

	int 1
	return

abi_routing2:
	int 0
	txnas ApplicationArgs
	byte "546d3c21"
	==
	bz abi_routing3

	callsub get_vault_addr

	int 1
	return

abi_routing3:
	int 0
	txnas ApplicationArgs
	byte "9e810f4b"
	==
	bz abi_routing4

	callsub delete_vault

	int 1
	return

abi_routing4: