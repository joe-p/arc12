#pragma version 8

b main

create: // create()
	txn OnCompletion
	int NoOp
	==
	assert

	txn ApplicationID
	int 0
	==
	assert

	// src_map:arc12.rb:150
	int 1
	return

	// src_map:arc12.rb:151
	b post_routing

create_vault: // create_vault(receiver, mbr_payment)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 0 // create_vault: receiver [account]

	txn GroupIndex
	int 1
	-
	store 1 // create_vault: mbr_payment [pay]

	// src_map:arc12.rb:159
	load 0 // create_vault: receiver [account]
	box_get
	swap
	pop
	!
	assert

	// src_map:arc12.rb:160
	load 1 // create_vault: mbr_payment [pay]
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// src_map:arc12.rb:161
	load 1 // create_vault: mbr_payment [pay]
	gtxns Sender
	txn Sender
	==
	assert

	// src_map:arc12.rb:162
	load 1 // create_vault: mbr_payment [pay]
	gtxns CloseRemainderTo
	global ZeroAddress
	==
	assert

	// src_map:arc12.rb:164
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	store 2 // pre_create_mbr

	// src_map:arc12.rb:166
	// Create vault
	// src_map:arc12.rb:167
	itxn_begin

	// src_map:arc12.rb:168
	int appl
	itxn_field TypeEnum

	// src_map:arc12.rb:169
	int 0
	itxn_field ApplicationID

	// src_map:arc12.rb:170
	byte b64 CCAEAAEEBSYHB2NyZWF0b3IIcmVjZWl2ZXIEwTFcWQSPTFY9BNFsgBgEJDeNPASTyPQZQgHoNQA0AChkEkSxI7IQNACyBzIKcwFIsggisgExALIJszEWIwg1ATQBOBgyCBJENAE4GSUSRIkxGSISRDEYIhJENhwBNQI2HAI1Ayg0A2cpNAJnQgG+MRkiEkQ2HAE1BDYcAjUFNjAANQY2HAM1BzEAKWQSRDQFgCDH/M2yWPDUGJwr+LbWjuaXUIZCsK0AHzH8uRjDVLqFmhJEMgpzAUg1CDIKcwBINQmxJLIQNASyFDQGshE0BLIVszQJMgpzAEgJNQo0CDIKcwFICTULsSOyEDQFsgc0C4ECNAoLCbIIszIKcwlIIxJBAAU0B4j/EkIBITEZIhJENjAANQwxFiMJNQ00DBY1DjQOvkxIFEQ0DTgAMQASRDQNOAcyChJEMgpzAUg1CDQOgSC5NA4xAL+xJLIQMgqyFCKyEiKyATQMshGzQgDOMRklEkQyCnMASCISRDEAMgkSREIAuDEZIhJENjAANQ82HAE1EDYcAjURNhwDNRI0DxY1DjQOvkxIRDQSNA6+SBJENBApZBJENBEoZBJEMQA0EBJEMgpzAUg1EzQOvLEkshA0ELIUIrIBMQA0D3AATEiyEjQPshE0ELIVs7EjshA0ErIHMgpzAUg0EwmyCCKyAbMyCnMJSCMSQQAFNBGI/htCACoqKycEJwUnBiorJwQnBScGNhoAjgr+JP5D/uD/M/9J/iT+Q/7g/zP/SQAjQw==
	itxn_field ApprovalProgram

	// src_map:arc12.rb:171
	txna Applications 0
	app_params_get AppClearStateProgram
	pop
	itxn_field ClearStateProgram

	// src_map:arc12.rb:172
	int NoOp
	itxn_field OnCompletion

	// src_map:arc12.rb:173
	load 0 // create_vault: receiver [account]
	itxn_field Accounts

	// src_map:arc12.rb:174
	txn Sender
	itxn_field Accounts

	// src_map:arc12.rb:175
	int 0
	itxn_field Fee

	// src_map:arc12.rb:176
	method "create(account,account)void"
	itxn_field ApplicationArgs

	// src_map:arc12.rb:177
	int 2
	itxn_field GlobalNumByteSlice

	// src_map:arc12.rb:178
	itxn_submit

	// src_map:arc12.rb:180
	itxn CreatedApplicationID
	store 3 // vault_id

	// src_map:arc12.rb:182
	// Fund vault with account MBR
	// src_map:arc12.rb:183
	itxn_begin

	// src_map:arc12.rb:184
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:185
	load 3 // vault_id
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// src_map:arc12.rb:186
	global MinBalance
	itxn_field Amount

	// src_map:arc12.rb:187
	int 0
	itxn_field Fee

	// src_map:arc12.rb:188
	itxn_submit

	// src_map:arc12.rb:190
	load 0 // create_vault: receiver [account]
	int 8
	box_create

	// src_map:arc12.rb:191
	load 0 // create_vault: receiver [account]
	load 3 // vault_id
	itob
	box_put

	// src_map:arc12.rb:193
	load 1 // create_vault: mbr_payment [pay]
	gtxns Amount

	// src_map:arc12.rb:194
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	load 2 // pre_create_mbr
	-
	int 2
	global MinBalance
	*
	+

	// src_map:arc12.rb:193
	==
	assert

	// src_map:arc12.rb:196
	load 3 // vault_id
	itob
	byte 0x151f7c75
	swap
	concat
	log

	// src_map:arc12.rb:197
	b post_routing

verify_axfer: // verify_axfer(receiver, vault_axfer)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 4 // verify_axfer: receiver [account]

	txn GroupIndex
	int 1
	-
	store 5 // verify_axfer: vault_axfer [axfer]

	// src_map:arc12.rb:203
	load 4 // verify_axfer: receiver [account]
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:204
	load 5 // verify_axfer: vault_axfer [axfer]
	gtxns Receiver
	load 4 // verify_axfer: receiver [account]
	box_get
	pop
	==
	assert

	// src_map:arc12.rb:205
	load 5 // verify_axfer: vault_axfer [axfer]
	gtxns CloseRemainderTo
	global ZeroAddress
	==
	assert

	// src_map:arc12.rb:206
	b post_routing

get_vault_id: // get_vault_id(receiver)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 6 // get_vault_id: receiver [account]

	// src_map:arc12.rb:212
	load 6 // get_vault_id: receiver [account]
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:213
	load 6 // get_vault_id: receiver [account]
	box_get
	pop
	byte 0x151f7c75
	swap
	concat
	log

	// src_map:arc12.rb:214
	b post_routing

get_vault_addr: // get_vault_addr(receiver)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 7 // get_vault_addr: receiver [account]

	// src_map:arc12.rb:220
	load 7 // get_vault_addr: receiver [account]
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:221
	load 7 // get_vault_addr: receiver [account]
	box_get
	pop
	btoi
	app_params_get AppAddress
	pop
	byte 0x151f7c75
	swap
	concat
	log

	// src_map:arc12.rb:222
	b post_routing

delete_vault: // delete_vault(receiver, vault, creator)
	txn OnCompletion
	int NoOp
	==
	assert

	txna Accounts 1
	store 8 // delete_vault: receiver [account]

	txna Applications 0
	store 9 // delete_vault: vault [application]

	txna Accounts 2
	store 10 // delete_vault: creator [account]

	// src_map:arc12.rb:229
	load 8 // delete_vault: receiver [account]
	box_get
	swap
	pop
	assert

	// src_map:arc12.rb:230
	load 9 // delete_vault: vault [application]
	load 8 // delete_vault: receiver [account]
	box_get
	pop
	btoi
	==
	assert

	// src_map:arc12.rb:231
	load 9 // delete_vault: vault [application]
	byte "creator"
	app_global_get_ex
	pop
	store 11 // vault_creator

	// src_map:arc12.rb:232
	load 11 // vault_creator
	load 10 // delete_vault: creator [account]
	==
	assert

	// src_map:arc12.rb:234
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	store 12 // pre_delete_mbr

	// src_map:arc12.rb:236
	// Delete vault
	// src_map:arc12.rb:237
	itxn_begin

	// src_map:arc12.rb:238
	int appl
	itxn_field TypeEnum

	// src_map:arc12.rb:239
	load 8 // delete_vault: receiver [account]
	box_get
	pop
	btoi
	itxn_field ApplicationID

	// src_map:arc12.rb:240
	int DeleteApplication
	itxn_field OnCompletion

	// src_map:arc12.rb:241
	int 0
	itxn_field Fee

	// src_map:arc12.rb:242
	itxn_submit

	// src_map:arc12.rb:244
	// Send vault MBR to creator
	// src_map:arc12.rb:245
	itxn_begin

	// src_map:arc12.rb:246
	int pay
	itxn_field TypeEnum

	// src_map:arc12.rb:247
	load 11 // vault_creator
	itxn_field Receiver

	// src_map:arc12.rb:248
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	load 12 // pre_delete_mbr
	-
	itxn_field Amount

	// src_map:arc12.rb:249
	int 0
	itxn_field Fee

	// src_map:arc12.rb:250
	itxn_submit

	// src_map:arc12.rb:251
	b post_routing

main:
	method "create()void"
	method "create_vault(account,pay)uint64"
	method "verify_axfer(account,axfer)void"
	method "get_vault_id(account)uint64"
	method "get_vault_addr(account)address"
	method "delete_vault(account,application,account)void"
	txna ApplicationArgs 0
	match create create_vault verify_axfer get_vault_id get_vault_addr delete_vault
	err

post_routing:

	// src_map:contract.rb:401
	int 1
	return
